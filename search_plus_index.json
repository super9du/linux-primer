{"./":{"url":"./","title":"Linux 不入门到入门 · 介绍","keywords":"","body":" 广告：你可能需要一台自己的远程服务器（每月 8 块多） 《Linux 不入门到入门》介绍 注意 本书内容可能存在错误、疏漏或过时，请大家注意甄别 关于本书 点次阅读本书 本书主要整理自 中国大学慕课-Linux系统管理 视频教程 实验楼-Linux基础入门 网络等 本书的目标是 让初学者对 Linux 命令有一个大致掌握 让已掌握 Linux 的人梳理 Linux 命令的知识体系和脉络 为大家提供一个常用 Linux 命令的速查平台 如果你需要对本书的内容进行勘误 第一种方式：在本书所在的 Git 仓库上提交 issue，阐明出错内容的位置和更正建议 第二种方式：Fork 本书所在的 Git 仓库，修改你认为有问题的地方，提交 Pull Request 关于继续学习 Linux 书籍推荐 《Linux命令行与shell脚本编程大全》入门 Linux 和 shell 脚本编程（推荐） 《鸟哥的Linux私房菜》 Linux 网站推荐 Linux中国—— tl;dr，一款「Linux 命令速查工具」，内容由志愿者翻译自权威网站。另外，「Linux中国」有一款名为「Linux」的小程序，可以查到更多命令 Linux命令大全，命令速查工具，有一些错误和疏漏，内容格式略有不一，需要注意甄别 鸟哥的 Linux 私房菜 鸟哥自己做的网站，上述《鸟哥的Linux私房菜》最早其实就成型于此站，该书也可以在此站上免费阅读 关于学习的建议 Linux 命令繁多而复杂，将所有 Linux 命令全部都靠死记硬背地掌握下来是不太现实的。毕竟大家年纪都大了，记忆力远不如小孩子。所以第一点建议： 不要死记硬背！ 我建议大家学习的时候，先跟着「中国大学慕课-Linux系统管理」视频敲一遍。第一遍学习，不用太过在意细枝末节。因为学了不用，你也得忘，而且会忘得干干净净。俗话说熟能生巧，命令用的多了，自然就记住了。因此学完以后，一定把最佳实践中留给大家的任务做一遍。所以第二点建议： 多动手实践！孰能生巧！ 另外，很多人喜欢记笔记，有时这不是一个好习惯（尤其是把笔记记在纸上）。现在是 21 世纪了，如果大家要记笔记，我建议大家记电子笔记。推荐大家选择一款名为 Typora 的 Markdown 编辑器来记笔记。相比纸质来说，可以搜索，能让笔记活起来，而不是让笔记放角落吃灰。对于初学者，我不建议边学边记笔记，因为这样浪费时间，也不利于记忆的连续。所以第三点建议： 不推荐边学边记！如果非要记，记在电脑里！ 但学完一门课或一本书，记记笔记、画画脑图，把知识复习巩固、总结归纳一下，还是非常有必要的（只是不建议大家在学习过程中记笔记）。 不记笔记忘了怎么办？ 有几个方法。第一，本书就是你的笔记。如果忘了，你可以来 https://super9du.github.io/linux-primer/ 搜索（以后还会发布可以下载的电子书）。第二，网上查询。除了本书和搜索引擎，在这个部分我列举的网站也可以帮助大家。第三，买书。在里提到的两本书大家可以买来速读一下，在需要的时候当作手册查阅。第四，使用帮助命令。熟练使用帮助命令，即便记不住命令的诸多选项也能让你游刃有余。第五，多实践。需要用的时候，想不起来可以使用帮助命令。如果帮助命令看不懂，还可以网上搜索或者查书。 关于一些格式 在本书命令介绍中 被 <> 包围表示必选项，如 。 被 [] 包围表示可选项，如 [选项]。 本书中如无意外 均表示必选项，[选项] 表示可选项。 | 表示可选该符号左边或右边的一种方案，如 [文件|目录]。鉴于 gitbook 的渲染算法存在 bug，本书有时也会使用 / 替代 | 。 - 后跟一个字符，称为短格式。比如 rm -f filename。 -- 后跟一个单词或词组（中间用 - 连接），称为长格式。比如 rm --force filename。 短格式的选项如果不冲突一般可以连用。如列出全部文件的长格式 ls -a -l，可以写为 ls -al。 命令介绍中的 = 表示该命令后紧跟 = 后的内容。比如 tar 命令的一个帮助页面有这么一段： -f, --file=ARCHIVE use archive file or device ARCHIVE --force-local archive file is local even if it has -f, --file=ARCHIVE 表示在实际输入时写为 tar -f 或 tar --file 即可。例如 tar -xzvf demo.tgz 。 有时上条所属选项的格式也会写为 -s N 这样的格式，比如 free 命令的帮助格式： -s N, --seconds N repeat printing every N seconds -c N, --count N repeat printing N times, then exit bash 命令中上方和后方的 # 代表注释的开始，回车代表注释的结束。 许可协议 本项目遵循 CC BY-NC 协议。也即： 转载请注明出处！ 严禁用于任何商业用途! 友情链接 SpringCloud 不入门到入门 "},"part1-start.html":{"url":"part1-start.html","title":"第一章：开始","keywords":"","body":"开始 名词解释 大小写敏感: 即区分大小写。Linux 中的命令和脚本是区分大小写的，文件的名称也是区分大小写的。 shell: 原意壳，包裹在操作系统内核之外，是一种用于解释执行 shell 脚本的工具。Linux 中的 shell 有很多种，比如 sh（Bourne shell）、bash（Bourne Again shell）、dash（Debian Almquist shell）、zsh 等。shell 命令对大小写敏感。 bash: Linux 默认的 shell，在 Linux 上 sh 一般是 bash 的软连接。但 ubuntu 等 debain 系列的 Linux 上，sh 默认指向 dash。 Linux 操作系统 冷知识 你知道三大操作系统是哪三个吗？ 三大操作系统分别是：Windows、Linux、Unix。 目前世界上的操作系统除了 Windows，基本上都是基于 Linux 或 Unix 系统进行开发的。Mac OS 就是基于 Unix 的一个分支进行开发的，而 Android 是基于 Linux 进行开发的。其中 Unix 最早诞生，而 Linux 的诞生又与 Unix 有关，同时因为 Linux 与 Unix 十分相似，所以大家又把 Linux 称为「类 Unix 操作系统」。 Linux 操作系统按照用途，分为两大类。一种是用于个人电脑，一种是用于服务器的。用于个人电脑的通常是有用户界面的，因为这样学习成本低，对个人用户来说效用更高。用于服务器的通常不安装用户界面，只能通过命令行与操作系统交互，因为没有用户界面可以进一步降低企业服务器的运行成本，对企业来说，效用更高。 ubuntu 是通常用于个人电脑的 Linux 操作系统。属于 debian 系。 redhat 是主要面向企业的收费 Linux 操作系统。 Cent OS 是 redhat 的社区版，免费。所以通常各个公司都会选择使用 Cent OS 用作服务器的操作系统。这里我们也选择 Cent OS 进行学习。 如果大家有兴趣，也可以自己给电脑安装个 Linux，形成双系统。Deepin OS 推荐可以试试。最新推出的国产操作系统「统信 UOS」也可以尝尝鲜。 下载安装 下载：centos 安装：https://www.cnblogs.com/frankdeng/p/9027037.html 注意 对于初学者，在软件选择时，不要选择“最小化安装”（Minimal Install），而是选择“GNOME桌面” Linux 命令基础 关于命令输入前的字符串的解读 [root@localhost ~]# @ 符号之前表示用户名，之后表示 hostname ~ 表示当前目录，默认为 ~ ，表示家目录 最后的 $ 表示普通用户，# 表示管理员用户 whoami 命令 默认输出用户名 参数 说明 --version 输出版本号 --help 输出帮助 who 命令 who am i 输出用户名及伪终端编号和时间（应该是打开时间） who 命令其它常用参数 参数 说明 -a 打印能打印的全部 -d 打印死掉的进程 -m 同am i,mom likes -q 打印当前登录用户数及用户名 -u 打印当前登录用户登录信息 -r 打印运行等级 echo 命令 echo 回显 echo 后的字符（忽略英文单/双引号） echo -n 表示显示后不换行 echo -e 表示执行单引号包裹的以 \\ 开头的转义字符（反斜杠） nano - 编辑器，有自己的界面 Ctrl + o 填入文件名，保存 Ctrl + g 帮助文档 Ctrl + x 返回（连按两次退出nano界面） 技巧与帮助 使用技巧 自动补全：输入任意字符，按Tab自动补全输入命令。（当输入的字符不能唯一确定是某个命令时无效） 列出提示：输入任意字符，连按两次Tab，提示以输入字符开头的所有命令 命令帮助：不了解的命令可通过 命令 --help 查看命令帮助。 man - 帮助文档命令 man. manual 的简写，手册、指南的意思。 ↩ 指令示例 man who 进入 who 命令帮助文档界面 man 1 ls 显示第一区段中的ls命令 man 页面。 man 1 read 表示读取手册第一部分的命令。man 后面不添加数字默认从最小的分区进行读取。 使用技巧 上下箭头允许将内容上下滚动 page up 和 page down 允许翻页 / 加字符串表示从光标处向下查找（斜杠） n跳转到下一个匹配处 N跳转至上一个匹配处 q 退出 man 关于系统手册 - 共分为9大部分 可运行的指令或可执行文件的帮助文档 系统核心可使用的函数与工具等的帮助文档 一些常用函数与库的帮助文档 设备文件的说明 配置文件或是某些文件的格式说明 游戏程序的帮助文档 惯例与协议，如文件系统、网络协议等的说明 系统管理员可用的管理命令的帮助文档 跟系统核心有关的文件的帮助文档 注意 9个部分可能存在同名的命令 命令行常用快捷键 按键 作用 Ctrl+c 终止当前命令 Ctrl+d 键盘输入结束或退出终端 Ctrl+s 暂停当前程序，暂停后按下任意键恢复运行 Ctrl+z 将当前程序放到后台运行，恢复到前台为命令fg Ctrl+a 将光标移至输入行头，相当于Home键 Ctrl+e 将光标移至输入行末，相当于End键 Ctrl+k 删除从光标所在位置到行末 Alt+Backspace 向前删除一个单词 Shift+PgUp 将终端显示向上滚动 Shift+PgDn 将终端显示向下滚动 关机和重启 Linux系统管理员关机三步走 关机是危险操作，所以Linux系统管理员关机时需要十分谨慎，一般分为以下三步： 查看在线用户和在线服务 通知用户关机/重启原因和时间安排 下达关机或者重启命令 shutdown - 关机或重启命令（仅根用户可用） 摘自：https://www.cnblogs.com/endv/p/6622452.html 　Linux 关机命令 shutdown -h now 立刻关机（需要root权限） shutdown -h 10 10分钟后自动关机（需要root权限） shutdown -h 00:00 午夜00:00自动关机（需要root权限） shutdown -h 10 系统即将关机，请注意保存 “系统即将关闭...”字样会发给每个终端（需要root权限） 　　如果是通过shutdown命令设置关机的话，可以用shutdown -c命令取消重启。使用 shutdown -c 需要 root 权限。 Linux 重启命令 shutdown -r now 立刻重启（需要root权限） shutdown -r 10 过10分钟自动重启（需要root权限） shutdown -r 20:35 在时间为20:35时候重启（需要root权限） 　　如果是通过shutdown命令设置重启的话，可以用shutdown -c命取消重启。使用 shutdown -c 需要 root 权限。（跳转到获取管理员权限） 其他关机/重启命令 除了使用 shutdown 命令还可以使用以下命令关机或重启 halt 立刻关机（该命令使用后需要手动关闭电源） poweroff 立刻关机（相当于 halt + 切断电源指令。多用户方式下(Runlevel 3)不建议使用） reboot 立即重启（相当于 shutdown -r now，但不安全） "},"part2-file-management.html":{"url":"part2-file-management.html","title":"第二章：文件管理","keywords":"","body":"文件管理 名词解释 路径: 由多级目录组成且中间使用斜杠连接的一串字符串。Windows 中开头必须是盘符:\\，结尾必须是最后一级目录或文件名（Windows中除可执行文件，均需加扩展名）。如 Windows 中 cmd 的路径为： C:\\windows\\system32\\cmd.exe。 绝对路径: 如 /tmp/level1, /home 这种从根目录一直列的路径称之为绝对路径（home 是根目录下的文件夹）。 相对路径: 如 level/level2 level1 test 这种从当前目录列的路径称之为绝对路径。 归档: 同打包，与压缩不同。归档代表着将文件不经压缩放在一个包中，类似于复制。 解档: 同解包，与解压不同。代表将归档的文件按照需要还原以供使用。 打包: 即归档，与压缩不同。Linux中打包和压缩是两种不同的存在。归档代表着将文件不经压缩放在一个包中，类似于复制。 解包: 即解档，与解压不同。代表将归档的文件按照需要还原以供使用。 切换、创建、删除目录 Linux 顶层目录结构 / 根目录 ├── bin 存放用户二进制文件 ├── boot 存放内核引导配置文件 ├── dev 存放设备文件 ├── etc 存放系统配置文件 ├── home 用户主目录 ├── lib 动态共享库 ├── lost+found 文件系统恢复时的恢复文件 ├── media 可卸载存储介质挂载点 ├── mnt 文件系统临时挂载点 ├── opt 附加的应用程序包（第三方软件建议安装目录） ├── proc 系统内存的映射目录，提供内核与进程信息 ├── root root 用户主目录 ├── sbin 存放系统二进制文件（根用户可执行） ├── srv 存放服务相关数据 ├── sys sys 虚拟文件系统挂载点 ├── tmp 存放临时文件 ├── usr 存放用户应用程序 └── var 存放邮件、系统日志等变化文件 注：打开命令行默认处于登录用户的家目录 cd - 切换目录命令 （Change Directory） 符号 释义 示例 / 根目录 cd /tmp 切换目录到根目录下的 /tmp 目录 . 当前目录 cd ./dir01 切换至当前目录下的 dir01 目录 .. 上一级目录 cd ../dir02 切换至上一层工作目录的 dir02 文件夹 - 返回上次进入的目录 cd - 返回上次进入的目录。按示例顺序执行命令则此时进入 dir01 ~ 用户家目录 cd ~ 回到用户的家目录 注意事项： 使用 pwd 可查看当前所在目录 cd - 可以理解为 Windows 文件系统界面的返回，亦可理解为浏览器的返回上一页的返回 cd ~用户名 表示进入xxx用户的家目录。如，cd ~sudoer 进入 sudoer 的家目录（波浪号和用户名之间的空格可有可无） mkdir - 创建目录命令（Make Directory） mkdir /tmp/test1 在 /tmp 目录下创建 /test1 目录，创建后自动进入该目录，但只能创建一个子目录。（此处退回 /tmp 目录进行下一步操作） mkdir -p /tmp/level1/level2 在 /tmp 目录下创建多级目录 rmdir - 删除目录命令（Remove Directory） rmdir test1 删除当前目录的 test1 目录，但只能删除空目录。使用 cd test1 命令则提示该文件或目录不存在 名词解释 绝对路径： 如 /tmp/level1 /home 这种从根目录一直列的路径称之为绝对路径。（home 是根目录下的文件夹） 相对路径： 如 level/level2 level1 test 这种从当前目录列的路径称之为绝对路径。 列出文件 ls - 列出文件命令（List） 语法： ls [选项] [文件名|目录名|none] 。ls 命令的选项后不跟任何东西表示显示当前目录文件。 列出所有文件：ls -a。包括隐藏文件（即名字以 . 大头的文件）。（ls a 即 List all） 列出文件的长格式：ls -l filename。即列出文件的详细信息（下文详解）。 列出当前文件夹的所有文件详细信息： ls -al，亦可写为 ls -a -l 。列出指定目录下的所有文件的详细信息。由两个命令组合而成。 列出文件的 inode-number：ls -il ，亦可写为 ls -i -l。 命令 ll 可以实现类似于 ls -l 的效果 tree - 列出树状目录与文件（日后补充） 此功能需要使用 yum install tree 安装。 文件格式与访问权限 关于文件长格式 长格式共分为 7 个部分，称为 7 个字段，分别为： 文件的类型和权限； 文件的硬链接数目； 文件属主； 文件属组； 文件大小； 文件时间戳； 文件名。 1、3、4 描述的是用户访问权限有关的东西。 长格式示例： -rwxr-xr--. 1 nboocer nboocer 23 7月 24 22:15 hello.sh -rw-------. 1 nboocer nboocer 762 1月 23 22:08 .bash_history 图示： 「导航」：查看 硬链接 类型和权限解读 长格式第一个字段（上图序号①）表示文件的类型和权限。具体如下图。①表示具体的文件类型，②③④表示文件访问权限。 对于①：文件类型 “类型和权限”第一个字符表示文件类型，不可更改 d 目录文件 - 或 f 普通文件 c 字符设备文件 b 块设备文件 l 符号链接文件 对于②③④：文件访问权限 除去第一个字符后，以每三个字符分为一组，分别表示「文件拥有者」（Owner，即属主）、「文件从属用户组」（Group，即属组）里的用户、「其他用户」的文件访问权限。 r 读权限。可以查看文件的内容 w 写权限。表示可以修改或删除该文件 x 执行权限。表示可以运行该文件 - 无相应权限。特定位置显示该符号表示没有相应权限 -rwxr-xr-- 表示该文件为普通文件。文件属主拥有可读、可写、可执行权限；文件属组用户拥有可读、可执行权限；其他用户拥有可读权限。 【文件访问权限的二进制写法】 rwx r-x r-- 原格式（为方便观看每三个字符间增加了一个空格） 111 101 100 过渡格式（-表示0；其他表示1） 7 5 4 二进制格式（将过渡格式按每三位一个二进制表示） 验证 准备工作： mkdir ~/test 创建目录 cd ~/test 进入目录 nano hello.sh 输入「hello」》ctrl + o 保存》回车》ctrl + x 退出到命令行模式。 ls -al 列出所有文件，及其权限。 验证： nano ./hello.sh 打开 hello.sh 文件。 在 nano 中尝试输入，修改该文件。 ./hello.sh 执行文件。（作者由于执行权限处显示 - ，因此提示权限不够）。 长格式类型和权限修改 chmod - 修改文件属性 chmod 700 hello.sh 表示 hello.sh 的权限改为 rxw------，即文件属主拥有可读可写可执行权限，除此之外的其他用户无任何权限。（注意要在 ~/test 目录下） chown - 修改文件的属主和属组 chown nbcc:stu hello.sh 将文件的属主和属组分别改为 nbcc 和 stu chown nbcc: hello.sh 将文件的属主改为 nbcc chown :stu hello.sh 将文件的属组改为 stu 复制、移动、删除文件 cp - 复制文件命令（Copy） 语法：cp [要复制的文件名|文件列表|目录] [目的文件名|目的目录] 选项： 选项 作用 -a 此参数的效果和同时指定\"-dpR\"参数相同 -R/r 递归处理，将指定目录下的所有文件与子目录一并复制过来 -f 强制覆盖 -p 原样复制。复制时不修改文件的任何属性，以防没有权限使用。但要求登录用户需对此文件拥有写权限 示例： 复制单个文件：cp ~/test/hello.sh ~/test/hello_bak 把 hello.sh 复制到 ~/test 目录下，并重命名为 hello_bak 复制多个文件：cp ~/test/hello.sh /tmp/level1/hello.sh ~/test2 把前两个目录的文件复制到 ~/test2 目录下 复制整个目录：cp -r ~/test ~/test2 目的目录存在和不存在时又分为两种情况。如果存在则把要复制的文件目录的文件名和该目录下的文件全部拷贝到目的目录 强制覆盖： cp -f -r ~/test ~/test2 原样复制：cp -p ~/test ~/test2 注意事项： 使用cp命令时，在目的目录遇到同名文件，系统会提示是否覆盖 mv - 移动文件命令（Move） 语法：cp [选项]... [-T] 源文件 目的文件 或：cp [选项]... 源文件... 目录 或：cp [选项]... -t 目录 源文件... mv 移动目录时不需要加任何选项。其他与 cp 命令大致相同。 -v 动态显示 -u, -update 之移动更新了的源文件 注意事项： 移动目录时，与目的目录同名会提示是否覆盖，可通过在 mv 命令后添加 -f 强制覆盖 Linux没有专门的重命名功能，但 mv 命令可以实现这个功能。如 mv ~/test/hello_bak ~/test/hello_bak.sh rm - 删除文件命令（Remove） 语法：rm [选项] 选项： 选项 选项长格式 作用 -d --dir 删除空目录。直接把欲删除的目录的硬连接数据删除成 0 -f --force 强制删除文件，且绝不提示 -i 每次删除前提示 -I 递归删除或一次性删除超过三个文件时提示 -r/-R --recursive 删除文件目录及文件（递归删除） -v 显示指令的详细执行过程 示例： 删除单个文件： rm /tmp/level1/hello.sh 删除多个文件：rm ~/test2/hello.sh ~/test2/hello_bak 删除目录及目录中文件：rm -R ~/test2 强制删除且不提示： rm -f ~/test/hello_bak 组合命令：rm -f -R 或 rm -fR 强制删除目录及其文件。据本人猜测，任意多个以 - 开头的命令均可随意组合。 注意事项： 如果删除的目录或文件名以 - 开头，如 -foo，可以选择以下两种命令其中一种 rm -- -foo rm ./-foo 使用 rm 来删除文件，通常仍可以将该文件恢复原状。如果想保证 该文件的内容无法还原，请考虑使用 shred。 文件链接 关于软连接与硬链接的具体内容见参考 Linux 文件数据存储原理 我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。 在 Linux 系统中查看 inode 号可使用命令 stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。 链接分类 符号链接：即软连接。文件用户数据块中存放的内容是另一文件的路径名的指向（类似于win中的快捷方式）。 硬链接：让一个 inode-number 对应多个文件名，文件的 inode 和数据还是一份。 符号链接 / 软连接（Symbolic Link / Soft Link） 创建 创建语法：ln -s [链接指向的文件] [ [链接文件位置/] 链接名] 创建示例：ln -s ~/test/hello.sh ~/test2/hello_slink （要求test2文件夹存在） 特征 软链接有自己的文件属性及权限等； 可对不存在的文件或目录创建软链接； 软链接可交叉文件系统； 软链接可对文件或目录创建； 创建软链接时，链接计数 i_nlink 不会增加； 删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。 硬链接（Hard Link） 语法 查看：ls -ial /folder/filename 查看全部文件的 inode-number 创建：ln [链接原文件] [链接目标文件] 示例 ln ~/test2/hello.sh /hello_hl01 可以使用 /hello_hl01 打开 ~/test2 目录下的 hello.sh 文件名。（相当于多了一个文件名） ln ~/test2/hello.sh /hello_hl02 可以使用 /hello_hl02 打开 ~/test2 目录下的 hello.sh 文件名。 ls -il ~/test2/hello.sh ~/hello_hl01 ~/hello_hl02 查看硬链接的inode-number，该值一样则为同一文件。另外，如果一文件会在系统中通过色块标识。 特征 由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性： 文件有相同的 inode 及 data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建，只可对文件创建； 删除一个硬链接文件并不影响其他有相同 inode 号的文件。 删除注意事项 对于创建了硬链接的文件，按原文件名删除后仍然可以使用该文件。 如删除 ~/test2 目录下的 hello.sh 文件 ： rm ~/test2/hello.sh 经使用 cat /hello_hl01 和 cat /hello_hl02 命令，发现文件仍可以打开。因此直到将硬链接删除干净，文件才算彻底被删除。 注意事项 不建议为目录创建硬链接。为什么? 不能夸硬盘分区创建硬链接。（不同分区的 inode-number 不唯一） 拓展：查看每个硬盘分区的inode总数和已经使用的数量，可以使用df命令。 df -i 打包和压缩文件 .tar 表示打包文件，.gz 表示使用 gzip 压缩的文件。不强制要求使用此后缀，但使用此后缀更方便理解。 tar- 打包命令（tape archive） 名字由来：由于最初的打包目的用于将文件备份至磁带上，因此得名 tape archive。 表层原理：把文件前后连接在一起，形成一个大文件，并不对文件进行压缩。 语法 tar [选项] [文件或目录] 注：使用该命令时，操作必须有，它告诉 tar要做什么事情，选项是辅助使用的，可以选用。 主操作模式【以下参数不可一起使用】 -A 合并两个归档文件 -c, --create 创建一个归档归档文件（即打包） -d, --diff, --compare 找出归档和文件系统的差异 -t, --list 列出归档文件中的文件 -r, --append 向归档文件末尾追加文件 -u, --update 只追加比归档文件更新的文件 -x, --extact, --get 从归档文件中解出文件（即解包解包） 选项 -C, --directory=DIR 指定一个解档目录（解档目录必须存在） --delete 从归档文件中删除一个文件 -f, --file=ARCHIVE 指定一个归档文件/设备进行操作。 -f 后紧跟归档文件名（中间空格可有可无） -j, --bzip2 通过bzip2压缩解压缩归档 -p 使用原文件的原来属性（属性不会依据使用者而变） -v, --verbose 详细地列出处理的文件，常和 t 连用。如 tar -tvf test.tar，列出归档中文件的长格式（常用） -X, --exclude-from=FILE 表示在压缩的过程中，不要将 FILE 打包 -z, --gzip, --gunzip, --ungzip 调用gzip来压缩/解压缩归档 -Z, --compress, --uncompress 通过compress压缩解压缩归档 打包多个文件或目录：tar -cf [打包文件名] [要打包的文件/列表] c 代表创建，f 代表文件。 示例 打包多个文件/目录：tar -cf hello.tar ~/test/hello.sh ~/test/hello_bak.sh 从归档中解出文件：tar -xvf hello.tar -C ~/tar 在打包文件末尾添加文件：tar -f hello.tar -r hello_hl01 列举归档中文件的长格式：tar -tvf hello.tar 注意事项 归档文件的「.tar」后缀名不是必须的，但是一般我们都会加上这个后缀，以告诉用户这个文件是一个归档文件 gzip - 压缩文件 语法 gzip [选项] 压缩|解压缩的文件名 选项 -c 将输出写到标准输出上，并保留原有文件。 -d 将压缩文件解压。 -r 递归式压缩/解压缩指定目录中的所有文件。 -num 用指定的数字 num (1~9) 调整压缩的速度和压缩比。 -v 对每一个压缩和解压的文件显示文件名和压缩比。人话：动态显示加锁或解压的详细信息。 -S, --suffix=SUF 自定义压缩文件后缀名，默认 .gz 。 -t 测试，检查压缩文件是否完整。 注意 gzip 在压缩文件过程中，会自动为文件添加一个“.gz”的后缀名，并且将原文件删除，另外解压缩时也会自动将源文件删除 如果要保留原文件，就必须使用-c 选项和Shell的输出重定向机制（在后面会进行详细讨论） 示例 压缩：gzip ~/hello.tar 解压：gzip -d ~/hello.tar.gz 查找文件 locate - 查找文件命令 locate命令和slocate命令都用来查找文件或目录。 locate命令其实是find -name的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库/var/lib/locatedb，这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用 updatedb命令，手动更新数据库。 语法：locate/slocate [选项]... [模式]... 选项： -d或--database=：指定数据库所在的目录； -u：更新slocate数据库； 模式：搜索的内容 示例：locate .tar 查找文件名中包含 .tar 的文件 find - 查找文件命令（重点） 查找较慢，但功能丰富。 语法： 简易：find [查找范围(可省略)] [查找选项] [动作] 复杂：find [-print | -ls] [-exec|-ok {} \\;] 查找选项 -print 将查找到的文件输出到标准输出 -fprint 将查找到的文件输出到指定文件 -exec command {} \\; 将查到的文件执行command操作，{}代表查找到的文件，\\;代表结束。({} 和 \\;之间有空格) -ok command {} \\; 和 -exec 相同，只不过在操作前要询问用户 -name : 查找名为filename的文件，即按文件名查找。 -iname : 与-name相同,只是忽略大小写(-i); -perm : 按执行权限来查找，n为八进制的三位数字，每个数字代表所属用户的权限，如754 -user : 按文件属主来查找 -uid : 按文件属主ID来查找 -group : 按文件属组来查找 -gid : 按文件属组ID来查找 -amin : 按文件访问时间来查找文件，-n指n分钟以内,+n指n分钟以前 -atime : 按文件访问时间来查找文件，-n指n天以内,+n指n天以前 -cmin : 按文件创建时间来查找文件，-n指n分钟以内,+n指n分钟以前 -ctime : 按文件创建时间来查找文件，-n指n天以内,+n指n天以前 -mmin : 按文件更改时间来查找文件，-n指n分钟以内,+n指n分钟以前 -mtime : 按文件更改时间来查找文件，-n指n天以内，+n指n天以前，只有 n 表示第 n 天 -size : 根据文件大小查找文件，+n表示超过n大小的文件，-n表示小于n大小的文件 -empty: 空白文件、空白文件夹、没有子目录的文件夹 -newer : 查更改时间比f1新但比f2旧的文件 -type : 查是块设备/目录/字符设备/管道/符号链接/普通文件 -prune: 忽略某个目录 示例： 根据文件名进行查找：find ~ -name hello.sh 。注意文件名为全称，如果使用关键字进行查找则需使用通配符。 根据文件类型进行查找：find /bin -type l。（查找bin目录下文件的符号链接文件） 组合查找：find ~ \\( -ctime -10 -a -size +1c -a -type f -a -name hello.* \\) -ls 。（找到家目录下十天以内创建的以 hello. 为前半部分命名的文件，* 表示通配符） -exec 示例：find ~/test \\( -mtime -10 -a -type d \\) -exec tar -cf {}.tar {} \\; 注意： -size ，其中：n表示文件大小的数值，b 表示512字节的块，c 表示字节，k 表示K字节，M 表示M字节（1024*1024字节=1024k），G 表示G字节（1024*1024*1024字节=1024M） -type ，其中b表示块设备文件，c表示字符设备文件，d表示目录，p表示命名管道文件，f表示普通文件，l表示符号链接文件，s表示socket文件 find 命令的所谓“命令动作（Actions）”，表示在查找到文件后，要对这些文件所做的操作，我们在这里只介绍其中三个常用的命令动作： –print：find命令的默认动作，将查找到的文件名输出 –ls：将将查找到的文件名以 ls –dils 格式输出 -exec command {} \\; ：对查找到的文件名执行指定命令，命令command由用户指定，用 {} 代表查找到的文件，用 \\; 结束。因为 ; 在 bash 中有特殊意义，因此分号前需要添加转义字符。 -ok command {} \\; ：与-exec非常类同，只不过在对文件执行指定命令之前会询问用户是否执行 在Linux中与文件相关的时间属性有三个： atime：文件最后被访问时间(Time when file data was last accessed.)，atime 是在读取文件或者执行文件时更改的。 mtime：文件内容最后被更改的时间(Time when data was last modified.)，mtime 是在写入文件时随文件内容的更改而更改的 ctime：文件状态（属性或者内容）最后被更改的时间(Time when file status was last changed)，ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。 常常在一些文章和资料中提到的文件时间戳(Timestamp)指的是文章的mtime。 在find命令支持用逻辑运算符来操作单个逻辑条件，或者将逻辑条件连接起来： –a 表示与 –o 表示或 ! 表示取反 使用多个条件时，这些条件要用圆括号括起来，左右圆括号还要使用反斜杠 \\ 来进行转义，以防止 shell 的解释。 通配符 Shell 常用通配符： 字符 含义 * 匹配 0 到多个字符 ? 匹配任意一个字符 [list] 匹配 list 中的任意单一字符 [^list] 或 [!list] ，匹配 除list 中的任意单一字符以外的字符 [c1c2...cn] 匹配中括号之间字符列表中的任意单一字符 [c1-c2] 匹配 c1-c2 中的任意单一字符 如：[0-9][a-z][a-zA-Z] {string} 匹配 string 中全部字符 如{0123456789} {string1,string2,...} 匹配 string1 或 string2 (或更多)其一字符串 ! 对中括号或花括号中的内容取反 创建文件 touch 命令 本身用于更新文件的访问和修改时间。但如果这个命令后接的文件不存在，则会创建一个空的文件。 语法：touch 示例 创建文件：touch ./hello.txt vim 命令 vim 文件不存在时，输入内容，按 :wq 即可写入内容并创建文件。 另一种奇淫巧技：cat 命令 cat>>filename 使用cat创建文件时，以系统默认的文件属性作为新文件的属性，并接受键盘输入作为文件的内容。输入结束时按Ctrl+d退出并保存文件。 cat file1 file2>>file3 将 file1 和 file2 合并到一个新的文件当中。（合并前需要确保这三个文件存在） 注：根据多方查找，linux中似乎并不存在创建文件的同时创建目录的命令。 查看文本文件 非常重要。主要用于查看日志、配置等，十分常用 相关命令 cat, less, more, head, tail... cat 命令（concatenate 连接缩写） cat 本身是连接文件、查看文件用的，上文创建文件的做法只是一种奇淫巧技。 示例 cat /etc/passwd 查看系统的用户配置文件 温馨提示 cat 适合查看较小的文件 more 命令 查看文件，适合查看内容较多的文件。缺点是不支持向前翻页（可能是我不会看 help 文件吧）。 技巧 按 空格 或 z 向下翻页 按 回车 向下 1 行。按 数字N + 回车，向下 N 行 按 q 退出 按 h 进入帮助（按理来说，按照帮助里的提示，按 b 是可以向上一行的，但是并不可以） 示例 more /etc/passwd 查看系统的用户配置文件 ss -anp | more 把 ss -anp 的输出传给 more 命令 head 和 tail 命令（头和尾） 这一对命令一般用于查看日志文件。head 用于查看文件的头几行，tail 同理。 示例 head -n 20 /var/log/messages 查看文件的头20行，不足20行显示全部 head 后不跟 -n 和参数默认显示前 10 行 tail -f 300 fileName 浮动（实时）查看日志尾部 300 行数据 less 命令 示例 less /var/log/message 查看 /var/log/message 的日志文件 技巧 进入 less 命令后： 使用 h 查看帮助 使用 q 退出，回到命令行 使用 y 上移一行（或使用 上箭头） 使用 e 下移一行（或使用 下箭头） 使用 /关键字 在文件中查找相应关键字 n 跳转到下一个关键字 N 跳转到上一个关键字 使用 g 进入第一行 使用 G 进入最后一行 使用 Ctrl+b 向上翻一页（或使用 Page Up） 使用 Ctrl+f 向下翻一页（或使用 Page Down） 参考 中国大学慕课-Linux系统管理 视频教程 理解 Linux 的硬链接与软链接 "},"part3-redirection-and-pipe.html":{"url":"part3-redirection-and-pipe.html","title":"第三章：重定向与管道","keywords":"","body":"重定向与管道 重定向（Redirection） Unix 三准则 一次只做一件事，并做到最好 能够与其他程序协同工作 能够处理文本流 输出重定向 bash 标准输入输出流 输出流名称 符号 作用 文件描述符 标准输入流 stdin 向命令提供输入 0 标准输出流 stdout 显示来自命令的输出 1 标准错误输出流 stderr 显示来自命令的错误输出 2 注：默认情况标准输出和标准错误输出都是在屏幕上输出。标准输入是在屏幕上输入。 Linux 从输入到输出的过程 键盘录入->执行命令->是否正确执行─┬─>正确->标准输出流 （stdout） └─>错误->标准错误输出流 （stderr） 什么是输出重定向 输出重定向就是将某个程序默认指向 stdout 或者 stderr 的输出文本流转而指向另一个文件，也即程序输出到某个指定文件中而不是输出到终端屏幕或者终端窗口中了。 对输出进行重定向的方法 1° n> n> ，重定向覆盖。表示将来自文件描述符 n 的输出重定向到文件，如果它存在，将覆盖原有文件内容；如果文件不存在，就创建它。必须对这个文件有写权限。 示例：输出 ls -l ~/test 的结果到 ~/stdout.txt 文件 ls -l ~/test 1>~/stdout.txt # 或 ls -l ~/test >~/stdout.txt ls ~/test cat ~/stdout.txt 解释： 该段代码表示将 ls -l ~/test 中列出的文件名，使用文件描述符为 1 的输出（即标准输出流），输出到家文件目录的 stdout.txt 文件。 2° n>> n>>，重定向追加。表示将来自文件描述符 n 的输出重定向到文件，如果它存在，输出就附加到现有文件后面；如果文件不存在，就创建它。 必须对这个文件有写权限。 示例：追加 ls -l ~/test 的结果到 ~/stdout.txt 文件 ls -l ~/test2 1>>~/stdout.txt ls ~/test2 cat ~/stdout.txt 解释： 将 ~/test2 中列出的文件名通过标准输出流输出到家目录下的 stdout.txt 文件末尾，并保留之前的内容。 注意 cat 为查看文本操作 n> 或 n>> 中的 n 是指 文件描述符。如果 n 省略不写，就代表 1，「标准输出」。将 n 改为 2 则指「标准错误输出」 同时进行重定向 ls -l ~/test ~/test2 1>~/stdout.txt 2>~/stderr.txt 将标准输出和标准错误重定向到同一个文件中 自动化脚本或后台作业常常采用这种做法，这样就能够在以后在文件中查看输出。 1° &> 或 &>> 使用 &> 或 &>> 将标准输出和标准错误重定向到同一个位置，如果是 &> 则覆盖原有同名文件，如果是 &>> 则追加到原文件末尾。 示例： ls -l ~/test ~/test2 &>std.txt 2° m>&n 或 m>>&n 将文件描述符 m 重定向至 n。 示例：将 ls 的标准输出重定向到 test.txt 中，将标准错误输出重定向到标准输出中 ls -l ~/test > test.txt 2>&1 # 等同于 ls -l ~/test &>test.txt 忽略标准输出或标准错误 /dev/null echo 1 apple\\n2 pear\\n3 banana > ~/test/fruit.txt 2>/dev/null 写入到 /dev/null 的内容都将被丢弃。 输入重定向 什么是输入重定向 输入重定向指的是让某个程序从指定文件中获取输入而非从 stdin 中 （常常指键盘）获取输入。 方法：使用 或 操作符将 stdin 重定向为来自文件。 示例 1 tr ' ' '\\t' tr 表示从标准输入中替换字符。 语法：tr [被替换的字符] [替换后的字符]。 示例意为使用制表符替换 fruit.txt 中的空格，并将 fruit.txt 输出到标准输出上。 示例 2 - here-document Bash 输入重定向的另一种形式。使用 sort -k 完成。 sort -k ： sort -k 选项表示指定按哪个字段进行排序。每串被空格隔开的字符串被认为时 sort -k 选项的一个字段。 原语法：sort -k[关键字字段序号] [要排序的文本文件] sort 原本要使用文本文件，here-document 使用 输入重定向语法：sort -k[关键字字段序号] 如： sort -k2 输出结果 1 apple 3 banana 2 pear 管道（Pipes） 概述 特殊的输入输出重定向。将一个命令的标准输出重定向为另一个命令的标准输入。 操作符：| （shift+\\） 注意：管道右边的命令必须能够接受标准输入流。 常见的能够接受标准输入流的命令 grep、cut、head、tail、less、more、wc、tr、sort 本章重点：grep、cut、wc 示例 1 ls -al /etc | less 将 ls 列出的东西使用 less 查看，以方便逐行或翻页查看 示例 2 - grep grep 是一个强大的搜索工具，可以使用正则表达式搜索文本。 语法：grep [查找的关键字] [查找的目标文件] ls -al /etc | grep 'ssh' 示例 3 - 文本提取和统计 cut - 文本切割命令 用于切割文本文件或者标准输出中的指定列并输出。 1、cut -c[n] 表示按字符列序号切割文本。n 为切割的字符列序号，可以是一个数字，也可以是多个数字，用英文逗号隔开。 cat ~/test/hello.sh | cut -c1,2 表示显示 hello.sh 的每一行的前两列字符。 2、cut -f[n] -d\"分隔符\" 表示按分隔符切割的字段切割文本。n 表示字段的序号，d 表示自定义的分隔符。 cat /etc/passwd | cut -f1 -d\":\" 表示显示以 : 为分隔符的每行第一个字段的内容。 wc -文本统计命令 语法：wc [文件目录] wc 输出的格式：行数 单词数 字节数 文件目录 仅统计文本行数：wc -l /etc/passwd 示例： ls -al ~ | cut -c1 | grep \"d\" | wc -l 表示统计当前用户家目录下目录文件的数目。 注意事项 管道不会传递错误输出 "},"part4-vim-editor.html":{"url":"part4-vim-editor.html","title":"第四章：vim 文本编辑器","keywords":"","body":"vim 文本编辑器 除了参考本书，你也可以在你的 Linux 上直接运行 vimtutor 命令，这是一个大约30分钟的教程。 入门 介绍 编辑器可以分为「图形模式的编辑器」和「文本模式的编辑器」，在 Linux 我们通常使用「文本模式的编辑器」。比如 vi、vim、emacs、joe、pico、nano。本章所讲的就是名为 vim 的文本编辑器。 vim（Vi IMproved）是 vi 的改进版，大多数情况下两个编辑器的操作相同。 使用 准备工作 大部分情况下 Linux 发行版本都是预装了 vim 的。万一你的主机上还没安装 vim，请输入如下命令安装它。 [root@localhost ~]# yum install vim 运行 vim 启动 vim 编辑器的命令： $ vim 使用 vim 打开文件的命令： [root@localhost ~]# vim file.txt 以上命令表示：存在 file.txt 则使用 vim 打开，不存在则创建该文件并打开 Vim 模式 包括普通模式、插入模式、命令行模式、选择模式、Ex 模式共计 5 种模式。常用普通模式、插入模式和命令行模式这三种。 普通模式 进入 默认进入普通模式。该模式不可进行输入，可进行如移动光标、删除、复制、粘贴等。底部显示的是文件名或者空白。 以下涉及到的字母如无例外均严格区分大小写。涉及到的大写按键可通过 Shift + 字母按键 输入。 移动光标 按键 说明 h, j, k, l 分别表示左、下、上、右移动光标 gg 移动到首行行首 G 移动到末行行首 0 或 ^ 移动到当前行首 $ 移动到当前行尾 w 到下一个单词的开头 b 到前一个单词的开头 e 到当前单词的结尾 ge 到前一个单词的结尾 Ctrl + F 向前翻页 Ctrl + B 向后翻页 Ctrl + o 快速回到上一次(跳转前)光标所在位置 数字+以上按键： 8l 向右移动 8 个字符 3j 向下移动 3 行 20gg 移动到第 20 行行首 3G 移动到第 3 行行首，作用同 3gg 10$ 下移 10 行，并定位到行尾 10w 光标向后移动10 个单词，停在单词的第一个字母上 5e 如果光标在当前单词末尾处，则光标向后移动 5个单词，停在在单词的最后一个字母上；否则移动 4 个单词 匹配搜索操作 命令 说明 f 向后搜索并跳转到第一个匹配的位置(非常实用) F 向前搜索并跳转到第一个匹配的位置 t 向后搜索并跳转到第一个匹配位置之前的一个字母(不常用) T 向前搜索并跳转到第一个匹配位置之后的一个字母(不常用) 删除操作 进入普通模式，使用下列命令可以进行文本快速删除： 按键 说明 x 删除游标所在的字符（小写 x） X 删除游标所在前一个字符（大写 X） Delete 同 x dd 删除整行 dw 删除一个单词（不适用中文） daw 删除一个单词（不适用中文） d$或D 删除至行尾 d^ 删除至行首 dG 删除到文档结尾处 d1G 删至文档首部 J 删除选中行的换行符 数字+以上命令，如： ndd 删除从光标行开始的向下 n 行 nx 从光标所在处开始删除 n 个字符 dnw 删除 n 个单词 复制、剪切与粘贴操作 【复制】 按键 说明 y 复制 yy 复制光标所在行（3yy 表示复制3行） y^ 或 y0 复制至行首。不含光标所在处字符。 y$ 复制至行尾。含光标所在处字符。 yw 复制一个单词。 y2w 复制两个单词。 yG 复制至文本末。 y1G 复制至文本开头。 【粘贴】 按键 说明 p(小写) 代表粘贴至光标后（下） P(大写) 代表粘贴至光标前（上） 【剪切】 其实前面讲得 dd 删除命令就是剪切，你每次 dd 删除文档内容后，便可以使用 p 来粘贴，也这一点可以让我们实现一个很爽快的功能——交换上下行：~ ddp，就这么简单，即实现了快速交换光标所在行与它下面的行。 替换操作 按键 说明 r+ 将游标所在字母替换为指定字母 R 连续替换，直到按下Esc cc 替换整行，即删除游标所在行，并进入插入模式 cw 替换一个单词，即删除一个单词，并进入插入模式 C(大写) 替换游标以后至行末 ~ 反转游标所在字母大小写 撤销与恢复操作 按键 说明 u 撤销一次（返回上一步操作状态） u 撤销一次或 n 次操作，如 u7 撤销 7 次改变 U(大写) 撤销当前行的所有修改 Ctrl+r 恢复一次撤销的操作 缩进操作 【缩进操作按键】 按键 说明 >> 整行将向右缩进 整行向左回退 【设置缩进长度】（shiftwidth） :set shiftwidth=10 设置缩进为 10 个字符 其他操作 ~ 转换大小写。 Shift + zz 保存并退出 vim。 插入模式 进入 普通模式下按 i 键进入（或通过以下按键进入），按 ESC 退出。底部显示的是 INSERT 或者插入。下表为普通模式进入插入模式的其他命令。 按键 说明 i 在当前光标处进行编辑 a 在光标后插入编辑 I 在行首插入 A 在行末插入 O 在当前行前插入一个新行 o 在当前行后插入一个新行 cw 替换从光标所在位置后到一个单词结尾的字符 命令模式 进入 使用执行命令（:键），搜索命令（/和?键）或者过滤命令（!键）进入命令模式，按 ESC 退出。可进行如打开、保存、查找、替换等操作。以下命令输入后需回车方可生效。 帮助命令 :h 查看 / 键帮助 :h / 查看 x 键帮助 :h x 保存、退出操作 命令 说明 :q 退出 :q! 强制退出，不保存 :x 保存并退出 :wq 保存并退出 :wq! 强制保存并退出 :w 保存，但不退出 :w 另存为 :saveas 另存为 位置操作 命令 说明 :ce (center) 使本行内容居中 :ri (right) 使本行文本靠右 :le (left) 使本行内容靠左 查找操作 命令 说明 / 向下查找要查找的字符串 ? 向上查找要查找的字符串 n 查找下一个内容 N 查找上一个内容 :noh 取消查找 进入查找之后，输入n查找下一个内容，N查找上一个内容。 【示例】 从头搜索：/hello 从尾搜索：?hello 【精确搜索】 \\ 表示匹配单词开头，\\> 表示匹配单词末尾，匹配完整单词”?\\“或者”/\\\" 如输入\"/hel\"、\"/\\\"、\"/llo\\>\"，可能搜索到 hello 【查找忽略大小写】 原文：vim 查找时忽略大小写 方式一 指令设定： :set ic #(ignorecase 的缩写) 忽略大小写 :set noic #(noignorecase 的缩写) 不忽略大小写 方式二 查找符号设定： /\\CWord #区分大小写的查找 /\\cword #不区分大小写的查找 【显示行号】 :set nu 【取消显示行号】 :set nonu 【保存时需要权限】 :w !sudo tee % 分屏 命令 说明 :term 打开某个终端。比如 :term bash ，打开 bash :sp [filename] 水平分屏 :vsp [filename] 垂直分屏 :close! 关闭窗口 或快捷键命令：^w + v 垂直分屏 s 水平分屏 w 切换窗口 c 关闭窗口 h | j | k | l 分别表示移动至左、下、上、右窗口 多文件编辑 第一个打开的文件编号为 1，第二个打开的文件编号为 2，以此类推。 使用 vim 打开多个文件编辑 vim 1.txt 2.txt 切换文件命令 命令 说明 :n 编辑下一个文件 :N 编辑上一个文件 :n! 不保存强制切换到下一个文件 :N! 不保存强制切换到上一个文件 对新文件的操作 命令 说明 :e 打开新文件 :e! 放弃正在编辑的文件，打开新文件 :e # 回到前一个文件 :ls 列出以前编辑过的文档 :b 直接进入该文件编辑 :bd 删除以前编辑过的列表中的文件项目 :f 显示正在编辑的文件名 :f 把正在编辑的文件名改为另一文件名 恢复文件 如果因为断电等原因造成文档没有保存，可以采用恢复方式，vim -r 恢复崩溃的会话。 可视模式 与普通模式比较相似。但是移动命令会扩大高亮的文本区域。 进入 按 v （小写）进入「可视」模式（底部显示 VISUAL 或 可视） 按 V （大写）进入「可视 行」模式 按 Ctrl+V 进入「可视 块」模式 操作 d 剪切操作 y 复制操作 p 粘贴操作 ^ 选中当前行，光标位置到行首（或者使用键盘的HOME键） $ 选中当前行，光标位置到行尾（或者使用键盘的END键） Shift+i 进入「插入」模式 选择模式 这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。 进入：普通模式下，可以按gh进入。 Ex 模式 这和命令行模式比较相似，在使用:visual命令离开Ex模式前，可以一次执行多条命令。 进入：普通模式下按Q进入Ex模式。 高级操作 视窗操作 vim 可以在一个界面里打开多个窗口进行编辑，这些编辑窗口称为 vim 的视窗。 命令行操作 命令 说明 :new 打开一个新的vim视窗 :sp 打开新的水平分屏视窗来编辑新的文件 :vsp 打开新的垂直分屏视窗来编辑新的文件 快捷键操作 命令 说明 Ctrl+w s 将当前窗口分割成两个水平的窗口 Ctrl+w v 将当前窗口分割成两个垂直的窗口 Ctrl+w q 结束分割出的视窗，同 :q。使用 :q! 强制结束。 Ctrl+w o 打开一个视窗并且隐藏之前的所有视窗 Ctrl+w 移至左/下/上/右面视窗 Ctrl+w 将当前视窗移至左/下/上/右面 Ctrl+w - 减小视窗的高度 Ctrl+w + 增加视窗的高度 Vim 编辑器参数 参数 说明 -y 容易模式 (同 \"evim\"，无模式) -R 只读模式 (同 \"view\") -l（小写L） Lisp 模式 -x 编辑加密的文件 + 启动后跳到文件末尾 + 启动后跳到第 行 -c 加载第一个文件后执行 -n 不使用交换文件，只使用内存 -r 列出交换文件并退出 -r 恢复崩溃的会话 在 vim 执行外部命令 在命令行模式中输入!可以执行外部的shell命令 命令 说明 :!ls 用于显示当前目录的内容 :!rm FILENAME 用于删除名为 FILENAME 的文件 :w FILENAME 将当前 VIM 中正在编辑的文件另存为 FILENAME 文件 查看帮助 普通模式下按F1打开vim自己预设的帮助文档 命令行模式下输入:h shiftwidth 打开名为shiftwidth的帮助文件 命令行模式下输入:ver 显示版本及参数 功能设定 可以在编辑文件的时候进行功能设定，如命令行模式下输入:set nu（显示行数）。 设定值退出vim后不会保存。要永久保存配置需要修改vim配置文件。 vim 配置文件位置（Cent OS 7 环境）： 用户个人配置文件在 ~/.viminfo； 全局配置文件在 /etc/vimrc（其他版本有可能在 /etc/vim/vimrc）。 设置配置 打开设置：:set 参数 关闭设置：:set no参数 # 打开 :set number # 关闭 :set nonumber 上面代码中，井号开始的行表示注释。 查询某个配置项是打开还是关闭，可以在命令模式下，输入该配置，并在后面加上问号。 :set number? 上面的命令会返回number或者nonumber。 获取目前的设定 命令行模式下输入:set或者:se显示所有修改过的配置 命令行模式下输入:set all 显示所有的设定值 命令行模式下输入:set option? 显示option的设定值 命令行模式下输入:set nooption 取消当前设定值 set 功能的说明 命令行模式下输入:set autoindent(ai) 设置自动缩进 命令行模式下输入:set autowrite(aw) 设置自动存档，默认未打开 命令行模式下输入:set background=dark或light，设置背景风格 命令行模式下输入:set backup(bk) 设置自动备份，默认未打开 命令行模式下输入:set cindent(cin) 设置C语言风格缩进 Vim 实践 准备工作 在 /tmp 目录下建立一个名为 vimtest 的目录，并进入该目录。 使用 vim 新建一个 hellovim.txt 的文件。 按 i 进入插入模式，在文件中输入任意一段话并保存。如： =============================================== This is a test. This is a test for vim. I want to learn Linux. I want to learn Linux very well. Because I'd like to be rich on the mental and the material. so I must study hard for making my dream can come true one day. =============================================== 将 /etc/man_db.conf 文件拷贝到本目录下。 使用 vim 打开这个文本文件。 1 设定行号 任务：设定行号 行号属于 vim 的环境参数。 环境参数 设置环境参数：Set 环境参数 取消设置环境参数：Set no环境参数 查阅设置参数：在一般模式下输入 : set all 查阅 步骤 按 : 进入命令模式 输入 set nu 即可设置行号 输入 set nonu 取消设置行号 2 移动光标 任务：移动到第 58 行行首，再右移 30 个字符，移动到第 8 行行尾，再向左移动 3 列，最后移动到文件末行 步骤 3 移动并搜索 任务：移动到第一行行首，并且向下搜索“man”这个字符串。 步骤 正常模式下键入 / 进入命令模式。 输入 man 回车，表示从光标处向下查找字符串。 用 n 继续向下查找字符串 用 N 向上查找字符串。 4 自由替换 任务：将 50 到 100 行之间的 man 替换为 MAN ，并自行选择是否替换。 语法：:n1,n2s/word1/word2/gc 解释：表示在 n1 和 n2 两行之间查找 word1 字符串并使用 word2 替换。 注意 末尾的 c 表示每次替换前询问（可省略）。 可使用 $ 代表最后一行 5 复制并粘贴 任务：复制 51 到 60 行的内容，并粘贴到最后一行。 yy 复制光标所在行 nyy 复制从光标行开始向下复制 n 行 p 在光标一行粘贴 6 删除 任务：删除 11 到 30 行之间的 20 行，去第 29 行首，并且删除 15 个字符。 dd 删除光标所在行 ndd 删除从光标行开始的向下 n 行 x 删除光标所在处的字符 nx 从光标所在处开始删除 n 个字符 7 撤销更改 任务：撤销之前的所有更改 u 撤销一次 :e! 撤销全部操作 8 另存为 任务：将这个文件另存成一个名为 man_db.conf.bak 的文件 语法：:w man_db.conf.bak 解释：:w 是保存，后面的字符串表示另存为 xxx 9 插入其他文件内容 任务：在最后一行后插入当前目录下 hellovim.txt 文件内容并保存。 语法：:r ./hellovim.txt 解释： 将 hellovim.txt 插入文件末尾。:r 表示读文件命令，后面文件名目录表示将这个文件的内容追加到光标所在行的后面。 保存并退出：:wq 回车 10 同时打开多个文件 任务：同时打开 man_db.conf 和 man_db.conf.bak 。（此处已退出编辑器） 步骤 vim 文件1 文件2 ... 文件n 打开多个文件 :n 切换到打开的下一个文件 :N 切换到打开的上一个文件 11 多个文件间的复制与粘贴 任务：将 man_db.conf.bak 中插入的 hellovim.txt 文件内容的第 1 列到第 10 列复制到 man_db.conf 中。 步骤 进入可视模式 移动光标选中文本（被选中的文本高亮显示） 使用 y 进行复制 存储两个文件并退出 Vim Cheat Sheet（Vim 快捷键一览图） 参考 实验楼·Vim编辑器 中国大学慕课-Linux系统管理 视频教程 "},"part5-user-management.html":{"url":"part5-user-management.html","title":"第五章：用户管理","keywords":"","body":"用户管理 用户与用户组 UID 概述 我们通常通过用户账号（一个字符串）来登录、使用系统，但 Linux 并非是通过用户账号识别用户身份的，而是使用一串名为 UID（User's ID）的数字识别用户身份的。每个用户的 UID 在当前的 Linux 系统中是唯一的。 用户分类 用户类型 用户名 UID 说明 管理员 用户 root 0 拥有系统的所有权限，且该用户只有一个 虚拟 用户 bin、daemon、ftp、mail、nobody 等 CentOS: 1-499 不具有登录系统的能力，但是不可或缺。一般用于给系统中的程序使用，如：浏览器即为nobody用户；匿名访问 ftp 时会用到 ftp 用户 普通 用户 用户自定 CentOS: >=500 可以登录系统，系统权限有限 用户组与GID概述 用户组就是具有相同特征的用户的一个集合体。一个用户组可拥有多个用户，一个用户亦可从属多个用户组，但每个用户的主用户组只能有一个。主用户组在存储文件时会影响文件的「从属用户组」这个属性。 Linux 使用 GID（Group's ID）识别用户组。在当前操作系统下每个用户组的 GID 同样具有唯一性。 查看用户 查看用户命令 id：查看用户 UID、GID、归属的用户组 finger：查看用户家目录、shell 类型、用户备注 一下两者都只能查看指定用户或当前用户，如需查看全部用户可使用 cat /etc/passwd 查看全部用户 id 命令 「使用 1」 id 此命令将显示用户的 UID 和用户的主用户组、归属的用户组及 GID。 「使用 2」 id 此命令用户查看当前用户的 ID 相关信息。相比上段命令多显示了一个环境，与 SELinux 有关，详情自行查阅。 finger 命令 「安装」 如果提示未找到命令，则需要进行安装 yum -y install finger 「使用 1」 finger 输出举例 以下#后为我添加的解释 Login: #用户名 Name: #备注 Directory: /home/用户名 # 家目录 Shell: /bin/bash # Shell类型 On since 五 2月 1 12:56 (CST) on :0 from :0 (messages off) On since 五 2月 1 13:05 (CST) on pts/0 from :0 4 seconds idle No mail. # 没有新邮件 No Plan. # 没有新计划 「使用 2」 finger 输出： Login Name Tty Idle Login Time Office Office Phone Host 登录用户名 用户备注 登录终端类型 空闲时间 登录时间 登录主机名或者IP地址 切换用户 原因 当普通用户需要访问 root 用户创建的文件时，由于我们既不属于 root 用户，也不从属 root 用户组，因此我们对文件来说属于其他用户。一般来说根用户创建的文件其他用户没有任何权限，因此我们需要切换为 root 用户进行文件访问。 在 Linux 中主张使用适当的用户做适当的操作。因此切换用户必不可少。 su - 切换用户命令（Switch User） 「使用」 su 或 su -l -l 表示不仅切换用户的身份，也切换了用户的 Shell 运行环境。可简写为 - 。（推荐） 「示例」 su - root 输入命令后回车，会提示输入密码。 「注意」 Linux 中输入密码不会出现任何提示！ 如果从根用户切换到普通用户则不需要输入密码！ 创建、修改、删除用户 以下命令需在 root 下使用，否则需要在命令前加上 sudo。 useradd - 创建用户 使用 adduser 和 useradd 命令均可，建议使用 useradd，因为删除和修改用户命令只有 userdel 和 usermod，使用 adduser 容易混淆。 方法 1：使用 sudo 获取根权限创建 不需要密码即可访问 「创建用户」 sudo useradd 「进入用户」 sudo su - 注意 sudo 不能丢！ 「切换 / 退出用户」 su - 此处将提示输入密码，使用已知密码的用户进行切换。 「设置密码」 sudo passwd 如果是修改当前用户的密码，则不需要在 passwd 后添加用户名。 方法 2：登录根用户创建 「创建用户」 su - root # 输入根用户密码 useradd 不知道根用户密码请参见「修改根用户密码」 「设置密码」 passwd #修改指定用户名的密码 注意使用当前命令需有根用户权限。 新建用户的默认属性 属性 默认值 UID 上一新建用户的 UID + 1，CentOS7的第一个新建用户UID默认是 1000。 家目录 /home/用户名 用户备注 无 主用户组 新建的与用户同名的用户组，该组的 GID 默认为上一新建组的 GID + 1。 其他从属用户组 无 Shell 类型 bash 由用户指定用户属性 以下参数严格区分大小写 参数 作用 -c（小写） 指定用户备注 -u 指定用户 UID（确保 UID 未被使用） -U 创建与用户同名的组 -d 指定用户家目录 -g 指定主用户组（确保该组已存在） -G 指定除主用户组外的从属组 -s（小写） 指定用户的登录 Shell 其他命令请在根用户下输入 adduser --help ，以参阅帮助。 「示例」 adduser -c 测试用户 -u 499 -d /tmp/test01 -g test01 -G test02,test03 -s /bin/tcsh testuser id testuser #查看主用户组和从属用户组 finger testuser #查看用户其他详细信息 usermod - 修改用户（User Modify） 该命令需在 root 下使用，否则需要在命令前加入 sudo。 「参数」 参数 作用 -l 修改用户名（修改的用户不能为当前登录用户） -G 替换除主用户组外其他从属组 -aG 向从属组添加组 -m 将家目录内容移至新位置 (仅于 -d 一起使用) -L/-U 锁定/解锁用户账号 -c/-u/-g/-d/-s 修改备注/UID/主用户组/家目录/登录Shell 「示例」 usermod -l test -g testuser -G testuser testuser id test finger test 这一命令将用户名修改为了 test ，用户组修改为了 testuser，且没有其他从属组。 usermod -l testuser -aG test01,test02,test03 test id testuser finger testuser 这一命令将用户名改回为 testuser，从属用户组除 testuser 增加了 test01, test02, test03。 「注意」：经测试仅存在 usermod 命令，但不存在 moduser 命令！ userdel - 删除用户（User Delete） 该命令需在 root 下使用，否则需要在命令前加入 sudo。 「使用」 userdel #需要手动删除家目录 或 userdel -r #删除用户的同时删除家目录和邮件池 删除用户不能为当前登录用户！ 「注意」经测试仅存在 userdel 命令，不存在 deluser 命令！ 创建、修改、删除用户组 以下命令需在 root 下使用，否则需要在命令前加入 sudo。 经测试仅存在 groupadd groupmod groupdel命令，不存在 addgroup modgroup delgroup 命令！ groupadd - 创建用户组 「选项」 -g 指定用户组的 GID 「示例」 groupadd testgroup usermod -aG testgroup test01 id test01 Linux 没有专门查看用户组的命令，需手动将用户添加到用户组进行查看。 groupmod - 修改用户组 「选项」 选项 作用 -g 修改 GID -n 修改组名 「示例」 groupmod -g 888 -n testgroup01 testgroup usermod -aG testgroup01 test01 id test01 「注意」：不建议修改用户组的 GID，否则容易造成系统混乱。 groupdel - 删除用户组 「示例」 groupdel testgroup01 groupdel testgroup 「注意」：只要有一个用户的主用户组为该用户组，则不可删除。且 groupdel 一次只能删除一个组。 用户权限 让渡根用户权限 本段修改自实验楼的 Linux 教程 获取 root 权限的方法 sudo 命令可以让用户无需根用户密码也能拥有部分根用户权限。 默认情况下新创建的用户是不具有 root 权限的，也不具有使用 sudo 的权限，我们可以通过让其「加入 wheel 用户组」从而获取 root 权限；也可以通过「修改 sudoers 文件」将用户添加 sudoers 中，获取 root 权限。 加入 wheel 用户组 默认情况下使用新建用户执行以下命令 # 注意 Linux 上输入密码是不会显示的 $ su - $ sudo ls -al 会提示该用户不在 sudoers 文件中。 因此需要用默认用户执行 sudo 命令将新建用户（如前文创建的 test01）添加到 wheel 用户组： $ su - # 此处可使用登录用户（或者说默认用户）的用户名 $ groups # 查看新建用户所属的组。 $ sudo usermod -aG wheel $ groups 进入新用户（这里为 test01 用户），使用 sudo ls -al 列出当前目录文件，表示获取 root 权限成功。 $ su - test01 $ sudo ls -al 修改 sudoers 文件 sudoers 文件位于 /etc/sudoers 。我们可以通过修改 sudoers 文件获取 root 权限。此文件只有 root 用户可以修改。 1）在 root 下执行以下命令 vim /etc/sudoers 2）找到 root ALL=(ALL) ALL 字样（CentOS7：第100行） root ALL = (ALL) ALL 可使用sudo命令的用户名 登录用户的来源主机名 = 可让渡权限的用户列表 用户可使用的命令列表 本段代码意为：root 用户可以在任何地方登录，以任意用户身份执行任何命令。 如果第一个字段为 % 打头的字符串，则表示该字段为可使用 sudo 的用户组。如，%wheel 。 3）按用户名获取权限 在上文所述代码下添加内容 test01 localpc=(root) /sbin/shutdown -h 5 本行命令意为：允许 test01 从 localpc 主机登录（假定 localpc 为本机名），使用 /sbin/shutdown -h 5 这个命令（命令需要以绝对路径方式指定）。 4）免去输入密码的步骤 在命令字段头部添加 NOPASSWD: test01 localpc=(root) NOPASSWD:/sbin/shutdown -h 5 5）按用户组获取权限 %testgroup localpc=(root) /sbin/shutdown -h 5 6）使用 x! 强制保存并退出 Linux 获取 Root 权限的方法 部分摘自：https://blog.csdn.net/itkingone/article/details/78689828 专业名词 sudoer：可以使用 sudo 的用户称为 sudoer。 临时获取 root 权限 非永久性获取Root权限可以在我们要键入的命令之前加上 sudo 前缀。 如我们要键入的命令是：rm ，以Root用户执行的方式就是：sudo rm 永久获取 root 权限 【1° 通过 sudoer 用户升级权限】 Sudoer 用户. 如：本地用户（默认登录用户）、根用户 ↩ $ sudo su 回车后输入普通用户的密码 【2° 直接通过根用户获取权限】 $ su root root 为根权限用户名，回车后输入根用户密码获取根用户权限。 再次使用 su 普通用户名 可回到普通用户。 ↓↓↓[修改根用户密码]↓↓↓ 【3° 通过修改根用户密码获取权限】 $ sudo passwd 输入 sudoer 密码后会要求输入根用户密码，回车进行确认密码。可通过 ctrl + c 结束命令/操作。 用户管理配置文件 分类 用户相关配置数据 /etc/passwd /etc/shadow 用户组相关配置数据 /etc/group /etc/gshadow /etc/passwd 系统用户花名册 系统所有用户均在此被记载，不在此花名册就不是该系统用户。 「打开」（任意用户可读） vim /etc/passwd 「解释」（passwd 共 7 个字段，每个字段之间用 : 隔开） test01:x:1001:1001::/home/test01:/bin/bash 字段 1 2 3 4 5 6 7 示例 test01 x 1001 1001 /home/test01 /bin/bash 解释 用户名 密码 UID 主用户组GID 对用户的描述(可选) 家目录 用户 Shell 名 显示密码为X，但实际的密码放在 /etc/shadow 中 /etc/shadow 系统用户密码本 「系统用户花名册」和「系统用户密码本」的分离原因 因为 /etc/passwd 是任意用户可读的，为保证密码安全，因此将两个文件分离。 「打开」（仅根用户可打开） vim /etc/shadow 「解释」（shadow 共 9 个字段，每个字段之间用 : 隔开） test01:$6$qkTHgdZ9$H8r7PZyUNesmo1YBTuRF9b3cuufVpkCU7s7DrqhBYvxSNugmkp76GXJWM8i0K31gIIj9VpbZk8pFOXRY/yYhx/:17928:0:99999:7::: 字段 示例 说明 1 test01 用户名 2 $6..x/ 加密的密码。该字段如果是* 或 !! 表示不能作为普通用户正常登录系统。 3 17928 密码最后修改时间。该值为 1970-01-01 起到最后一次密码修改的天数 4 0 密码修改最小时间间隔。默认是 0 ，表示随时可以改动。 5 99999 密码最长有效天数。默认 99999 天，约为 273 年。 6 7 密码失效警告天数。默认是 7，表示不启用该功能。 7 密码最长失效天数。默认为空，表示不启用该功能。如开启后超时会禁用该用户。 8 用户账号失效日期。默认为空，表示此用户永久可用。填写相对 1970-01-01 起的绝对天数，超过使用天数，该用户将会被禁用。 9 保留字段。默认值为空。 理论上可以通过修改 /etc/passwd 和 /etc/shadow 修改用户属性（但不建议）。 /etc/group 系统用户组花名册 「打开」（任意用户可读） vim /etc/group 「解释」（group 共 4 个字段，每个字段之间用 : 隔开） test01:x:1001:test03 字段 示例 说明 1 test01 用户组名 2 x 用户组密码 3 1001 用户组 GID 4 test03 从属该用户组的用户列表，每个用户之间用逗号隔开 关于第4字段：如果该用户组是某个用户的主用户组，则该用户不显示在该字段中。 /etc/gshadow 系统用户组密码本 「打开」（仅根用户可打开） vim /etc/gshadow 「解释」（gshadow 共 9 个字段，每个字段之间用 : 隔开） test01:!::test03 字段 示例 说明 1 test01 用户组名 2 ! 用户组加密的密码。! 或空表示无密码。 3 组管理者。多个组管理者之间用逗号隔开 4 test03 从属该用户组的用户列表，每个用户之间用逗号隔开 "},"part6-disk-management.html":{"url":"part6-disk-management.html","title":"第六章：硬盘管理","keywords":"","body":"硬盘管理 硬盘、分区的命名及查看 Linux 中硬盘命名及规则 linux 中所有的设备都是以文件形式出现，硬盘亦如此。 「命名」 硬盘设备文件名的格式一般为 /dev/xxy 。 「规则」 /dev 目录中存放的都是系统中的设备文件。 /xxy 中 xx 表示硬盘的类型。xx 可能的值为： sd ，表明这是采用 SCSI、SATA、USB 接口的硬盘。 hd ，表明这是采用 IDE 接口的硬盘。（少见） y 表示使用此类接口的第几个硬盘。可能为 a-z 间的英文字符。 「示例」 /dev/sdb 表示系统中第二个使用 sb 类型的硬盘。 /dev/hdd 表示系统中第四个使用 hd 类型的硬盘。 Linux 中硬盘分区的命名及规则 「概念」 借鉴自：https://www.cnblogs.com/alexyuyu/articles/3454907.html 硬盘分区有三种：主磁盘分区、扩展磁盘分区、逻辑分区。 关于分区，一个硬盘中： 主分区至少有1个，最多4个 扩展分区可以没有，最多1个 主分区+扩展分区不超过4个 逻辑分区从属于扩展分区，可以有若干个 1-4 号分区是保留给主、扩展分区的，逻辑分区一定由 5 号开始。 理解与解释： 一个硬盘中可以有 1-4 个主分区，如果存在扩展分区，则最多可以有 3 个主分区（主、扩分区据说是受 MBR 约束）。如果想要更多分区，则使用扩展分区表（EBR）将扩展分区分为若干逻辑分区，且仍可剩余未分配空间。 硬盘容量与分区关系： 硬盘容量 = 主分区总容量 + 扩展分区总容量（没有则忽略） 扩展分区 = 逻辑分区总容量 + 未分区容量（没有则忽略） 「注意」 上述分区方式应为 MBR 的分区方式，GTP 方式可直接将硬盘分为 1-128 个主分区。分区方式不同，分区操作也有不同。 「命名」 硬盘上分区的文件名格式一般为 /dev/xxynpn 。 「规则」 其中 /xxyn 中，n 表示扩展分区。 「分区划分方式」 主分区/扩展分区使用数字 1-4 表示 逻辑分区使用 >=5 的数字表示 「示例」 /dev/hda3 表示在第一个 IDE 硬盘上的第三个主分区 /dev/sdb6 表示在第二个 SCSI 硬盘上的第二个逻辑分区 fdisk 命令查看硬盘 语法：fdisk -l 「示例」 查看第一块硬盘： fdisk -l /dev/sda 输出： 磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘标签类型：dos 磁盘标识符：0x000d46a4 设备 Boot Start End Blocks Id System /dev/sda1 2048 4196351 2097152 82 Linux swap / Solaris /dev/sda2 * 4196352 41943039 18873344 83 Linux 「说明」 第一部分： 字段 说明 第1行 硬盘容量 第2行 每个柱面的容量 第3行 每个扇区的容量 第4行 磁盘最小逻辑和物理单元（磁盘读写的最小单元） 第5行 硬盘标签类型 第6行 硬盘标识符 第二部分： 标题 示例 说明 Device(设备) /dev/sda1 分区名 Boot 是否允许标准DOS PC主引导记录引导该分区。 Start 2048 分区的起始柱面 End 4196351 分区的结束柱面（紧邻下一起始柱面） Blocks 2097152 显示大小为 1k 的块的数量 Id 82 分区的预期用途（不代表分区的真实用途）。82表示Linux交换分区，83表示Linux数据分区 System Linux swap / Solaris 表示上一字段 ID 的类型 「注意」 示例输出第一部分为逻辑值，并实际硬盘的真实物理参数。 固态硬盘虽然没有盘片、磁头、扇区这些物理零件，但固态硬盘的接口规范和定义功能以及使用方法上与普通机械硬盘完全相同。因此，逻辑上固态硬盘也有以上参数。 示例输出第二部分如果没有分好区，则显示为空白。 硬盘分区和格式化 分区工具选择 Linux 中对硬盘分区有很多工具，如 fdisk、gdisk、cfdisk、cgdisk、sgdisk、parted 等。 这里选择 fdisk。 fdisk 命令用法 「用法」 fdisk 更改分区表 fdisk -l [硬盘名] 列出分区表 「示例」 输入以下命令进入分区更改界面： fdisk /dev/sda 「注意」 由于使用的是虚拟机，且没有为该虚拟机分配多余空间，无法直接使用 sda 新建分区。有两种解决方法： ① 使用 sda 的主分区 sda2 ，进一步划分分区，可用于学习实验使用，但保存分区配置会失败。。 ② 使用虚拟机软件给当前虚拟机新增一个 2G 的硬盘。对于 VM 15 Pro，依次点击：虚拟机》设置》找左下的「添加」按钮》选择硬盘》3次下一步》磁盘大小改为 2G 》下一步》完成》确定。重启虚拟机即可。 fdisk工具内命令 进入 fdisk 分区页面后，在「Command (m for help):」或「命令（输入 m 获取帮助）：」后输入以下命令使用相关功能。 命令及说明 命令 说明 m 帮助信息 n 新建分区 d 删除分区 l 列出 Linux 默认支持的文件系统类型 p 打印分区表（相当于在 bash 中使用 fdisk -l ） t 通过修改分区 ID，修改分区类型 w 写入操作到分区表并退出 q 不保留操作并退出 x 进入专家模式 n 新建分区 输入 n 回车，提示选择主分区 (p) 还是扩展分区 (e)。如果已存在扩展分区，将会用逻辑分区 (l) 替换原扩展分区的位置。 「选择新建主分区」 ① 直接回车（默认选择主分区 p）或输入 p 回车。 ② 提示输入分区号，直接进行回车或根据提示输入 1-4 。如果提示「No free sectors available」表示无剩余扇区可用，即没有多余空间可分配。该情况可使用某个主分区进行分区设置，如使用 fdisk /dev/sda2 进行配置。 ③ 接着提示输入起始扇区，如无特殊情况，直接回车即可。 ④ 接着提示输入结束扇区（这个不好算），一般输入 +size ，表示分配相应大小的空间。如 +100G ，表示分配 100G 大小的空间。（注意带单位，不带单位默认为 k） 「选择新建扩展分区」 ① 输入 e 回车。 ② 提示输入分区号，直接进行回车或根据提示输入 1-4 。如果提示「No free sectors available」表示无剩余扇区可用，即没有多余空间可分配。 ③ 接着提示输入起始扇区，如无特殊情况，直接回车即可。 ④ 接着提示输入结束扇区，如输入 +10G ，表示分配 10G 大小的空间。 「选择新建逻辑分区」 〇 建立扩展分区后再次输入 n 新建分区，将会以该选项（新建逻辑分区）替代之。 ① 输入 l 回车。 ② 提示输入分区号，直接进行回车或根据提示输入 1-4 。如果提示「No free sectors available」表示无剩余扇区可用，即没有多余空间可分配。 ③ 接着提示输入起始扇区，如无特殊情况，直接回车即可。 ④ 接着提示输入结束扇区，如输入 +10G ，表示分配 10G 大小的空间。 分区设置完毕，输入 p 命令查看是否修改成功。 t 修改分区类型 ① 输入 t 回车。 ② 输入要修改的分区号。 ③ 输入要修改的 ID 编号。 完成，输入 p 命令查看是否修改成功。 创建文件系统/格式化分区 硬盘分区之后一般需进行格式化分区 mkfs 命令（Make Files' System） 「用法」 mkfs -t 文件系统类型；若不指定，将使用 ext2 。 「示例」 mkfs -t ext4 /dev/sdb6 mkswap 命令（Make Swap） 「示例」 mkswap /dev/sdb7将 sdb7 设置为交换空间，无需进行格式化，交换空间指定格式为 swap。 手动挂载分区 准备 「挂载点概念」 Linux 的文件系统是一个树形结构，这个目录的根就是「根目录」(/)，根分区在开机的时候就自送挂载在根目录上了。我们划分并格式化好的分区也要挂载到这个目录上的某个目录上，才能被使用，否则这个分区就没有访问的入口。这个目录被称为该分区的挂载点。 因此我们需将划分并格式化好的分区挂载到目录树上去。 「系统其他挂载点」 在 bash 中输入 mount 命令查看挂载点。其显示的内容并不都是真正的硬盘分区，而是建立在内存中的一些特殊的虚拟分区。 sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime,seclabel) #用于管理设备 proc on /proc type proc (rw,nosuid,nodev,noexec,relatime) #用于存放进程及内核信息 ...... tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,seclabel) #暂时存放文件 devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,seclabel,gid=5,mode=620,ptmxmode=000) #用于管理设备 ...... 「准备」 在根用户下执行以下命令： 在根目录下创建目录： mkdir /mountdisk 进入目录： cd /mountdisk 创建 5 个目录分别用户挂载 sdb1，sdb5-8 ：mkdir document shared image music video mount 挂载命令 一般需要根用户权限 「用法」 mount [-hV] 无选项时表示：查看挂载点 mount [-fnrsvw] [-t ] [-o ] 「选项」 选项 说明 -a 自动挂载所有支持自动挂载的设备；(定义在了/etc/fstab文件中，且挂载选项中有“自动挂载”功能) -V 显示版本 -h 显示帮助 -r 以只读方式挂载文件系统。同 -o ro -w 以可读可写的方式挂载文件系统。默认使用次方式。同 -o rw -n 挂载时不更新 /etc/mtab -t 指定挂载分区的文件系统类型，通常不必指定。mount 会自动选择正确的型态。 -o 指定分区挂载后的一些行为属性 vfstype 表示文件系统类型，可能的值有 adfs, affs, autofs, cifs, coda, coherent, cramfs, debugfs, devpts, efs, ext, ext2, ext3, ext4, hfs, hfsplus, hpfs, iso9660, jfs, minix, msdos, ncpfs, nfs, nfs4, ntfs, proc, qnx4, ramfs, reiserfs, romfs, squashfs, smbfs, sysv, tmpfs, ubifs, udf, ufs, umsdos, usbfs, vfat, xenix, xfs, xiafs. -o 中 options 可以是 rw/ro 可读可写(默认)/只读、auto/noauto 打开(默认)/关闭自动挂载模式等。详见 Linux中挂载详解以及mount命令用法。 「示例 1：指定挂载分区的文件系统类型」 mount -t ext4 /dev/sdb1 /mountdisk/document 使用 mount 命令查看挂载点，最下方出现以下内容： /dev/sdb1 on /mountdisk/document type ext4 (rw,relatime,seclabel,data=ordered) 「示例 2：使用 -o 指定挂载后的行为属性」 mount -t ext4 -o ro /dev/sdb5 /mountdisk/shared 「注意」 如果挂载点原来存在文件，则分区挂载到该挂载点后原来的文件将被隐藏。 umount 卸载命令 一般需要根用户权限 「用法」 umount [-ahnrvV][-t ][文件系统|设备名|挂载点] 「示例」 umount /dev/sdb7 「注意」 当卸载分区内有数据时，卸载后通过原挂载点无法访问该分区数据。但数据依然存在与该分区。 自动挂载分区 手动挂载可能会需要在重启系统后重新挂载分区。 /etc/fstab 文件 该文件用于指定开机挂载的分区。 「打开」 vim /etc/fstab 「解释」 字段 示例 说明 1 UUID=XXX 指定了要挂载的文件。可以是 /dev 目录下的设备文件，或通过 UUID 或设备标签（LABEL）指定设备。 2 / 挂载点。swap 是没有挂载目录就是 swap。 3 ext4 挂载分区的文件系统类型。 4 defaults 挂载参数。指定文件系统挂载后的一些行为属性，可以为多个参数，使用逗号进行分隔。 5 1 Dump 参数。该选项被「dump」命令用来检查一个文件系统是否应该进行 dump 备份。不需要设为 0，每天备份设为 1，不定期备份设为 2 6 1 开机检查分区的次序。该字段被 fsck 命令用来确定系统开机进行文件系统检查时的顺序。根分区的值为 1，表示优先。2 表示次优。如果该字段为 0 或没有设置，开机将跳过此文件系统的检查。 「修改示例 1：用设备名修改」 /dev/sdb1 /mountdisk/document ext4 defaults 0 0 由于硬盘可能会存在经常的插拔，因此硬盘的次序和硬盘的设备名有可能会发生改变。如上一次为 sdb ，下一次就变为 sdc。所以该自动挂载的配置就失效了。 为此，我们可以为硬盘增加一个标签或UUID。 标签. 标签就是给硬盘起的一个有意义的别名。但标签可以不唯一。 ↩ 为分区加标签的命令. 语法：e2label 分区设备名 标签名 。如：e2label /dev/sdb5 shared_disk ↩ UUID. 全局唯一标识 (Universally Unique Identifier)。是标识系统中存储设备的一个字符串，不论是何类型。是唯一的、不变的。 ↩ 列出存储设备的UUID. 使用 blkid 列出所有存储设备的UUID。 ↩ 「修改示例 2：用标签名修改」 LABEL=shared_disk /mountdisk/shared ext4 defaults 0 0 此方式使用的 LABEL 标签不一定唯一。 「修改示例 3：用UUID修改」 UUID=d9eae11c-f50c-4a34-92db-62d12a9be0dd /mountdisk/image ext4 defaults 0 0 "},"part7-network-management.html":{"url":"part7-network-management.html","title":"第七章：网络管理","keywords":"","body":"网络管理 查看和操纵网络接口 本段内容提到的网络都是以太网以太网。其中所提到的网络接口、IP 地址都是由网络中的 DHCP 服务器提供的。 ifconfig 命令 if（interface，接口）。ifconfig 可用于查看和操纵（启动、关闭、修改）网络接口。查看所有用户可用，操纵根用户可用。 「查看用法」 ifconfig 查看所有已开启网络接口的详细信息。 ifconfig -a 查看所有网络接口的详细信息。无论是否被启用。 ifconfig 查看指定网络接口的详细信息。 「开启/关闭用法」 ifconfig up|down 开启指定网络接口。 「修改用法」 ifconfig ip地址 netmask 255.255.255.0 修改IP地址。 ifconfig mtu mut值 修改MTU值。 同理可以修改更多 注：ifconfig 改变的部分参数是临时的。 「 ifconfig 输出示例与解释」 输出示例（CentOS 7）： ens33: flags=4163 mtu 1500 inet 192.168.0.112 netmask 255.255.255.0 broadcast 192.168.0.255 inet6 fe80::428:b7e3:9ebe:f4e7 prefixlen 64 scopeid 0x20 ether 00:0c:29:87:5d:e4 txqueuelen 1000 (Ethernet) RX packets 157915 bytes 236347475 (225.3 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 51402 bytes 3628601 (3.4 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73 mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10 loop txqueuelen 1000 (Local Loopback) RX packets 64 bytes 5568 (5.4 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 64 bytes 5568 (5.4 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 virbr0: flags=4099 mtu 1500 inet 192.168.122.1 netmask 255.255.255.0 broadcast 192.168.122.255 ether 52:54:00:00:a8:af txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 第一段落解释（CentOS 6）： 示例 解释 eth0 网络接口名。eth0 代表第 1 个网络接口。如果有多个网络接口则按照 eth1,eth2依次进行排序。如果只有 eth0 则表示只有一个网络接口 Link encap 表示网络连接的类型。Ethernet 表示以太网 HWaddr 表示硬件地址 inet addr 网络接口的 IP 地址 Bcast 网络广播地址 Mask 子网掩码。一般是255.255.255.0 inet6 addr 网络接口 IPV6 地址 UP BROADCAST RUNNING MULTICAST 网络接口的运行状态 MTU 当前接口 (这里是eth0) 的最大数据传送单元大小 Metric 接口度量值 RX 和 TX 打头的两行 网络接口收发包的情况 collisions 数据传输发生冲突的次数 第二段落解释（CentOS 6）： 示例 解释 lo 回环接口（loop）。是一个模拟的网络接口，每个系统都有之。为系统提供了一个单机网络环境，一般用于网络程序的调试。 inet addr lo 的 IP 永远为 127.0.0.1 Mask 子网掩码永远为 255.0.0.0 配置 TCP / IP 网络参数 通过编辑文件配置 cd etc/sysconfig/network-scripts ip 命令 ip a 与 ifconfig 效果大致相同。列出网络接口详情 ip r 列出路由表 wget 命令 wget 用于从网络上的指定链接下载指定内容。w 可能是 web （网络）的首字母缩写。 wget #下载文件到当前目录下 curl 命令 参考链接：curl命令详解 curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。可被用于做网页处理流程和数据检索自动化。 语法 curl 选项 -A/--user-agent 设置用户代理发送给服务器 -b/--cookie cookie字符串或文件读取位置 -c/--cookie-jar 操作结束后把cookie写入到这个文件中 -C/--continue-at 断点续转 -D/--dump-header 把header信息写入到该文件中 -e/--referer 来源网址 -f/--fail 连接失败时不显示http错误 -o/--output 把输出写到该文件中 -O/--remote-name 把输出写到该文件中，保留远程文件的文件名 -r/--range 检索来自HTTP/1.1或FTP服务器字节范围 -s/--silent 静音模式。不输出任何东西 -T/--upload-file 上传文件 -u/--user 设置服务器的用户和密码 -w/--write-out [format] 什么输出完成后 -x/--proxy 在给定的端口上使用HTTP代理 -#/--progress-bar 进度条显示当前的传送状态 以太网. 英文 Ethernet，是一种计算机局域网技术 ↩ "},"part8-software-management.html":{"url":"part8-software-management.html","title":"第八章：软件管理","keywords":"","body":"软件管理 Linux 包管理工具主要分为两类：dpkg 和 rpm。dpkg 属于debian 系的默认包管理工具，比如 ubuntu 使用的就是 dpkg；rpm 属于 redhat 系的包管理工具，比如 CentOS 使用的就是 dpkg。apt-get 是 dpkg 的在线升级命令；yum 是 rpm 的在线升级命令。 这里主要讲 CentOS 的包管理工具。 使用 rpm 管理软件 rpm 在安装软件时，会先去 /var/lib/rpm 的 rpm 数据库中查询依赖的软件是否存在，如果不存在，则不能安装。这个问题称为【软件属性依赖】问题。 虽然 rpm 无法解决软件依赖问题，但还是有实用的地方的。同时由于 rpm 是 redhat 系官方包管理工具，许多软件安装可能绕不开 rpm，因此有必要学习一下。 安装、更新、移除 安装 rpm -ivh -i：安装 -v：显示指令执行过程 -h或 --hash：套件安装时列出标记 rpm 的安装是离线安装，安装包必须存在才能安装 更新 rpm -Uvh # 名为 package_name 的软件不存在则安装，否则更新 rmp -Fvh # 名为 package_name 的软件存在时则更新，否则什么也不做 移除 rpm -e # 名为 package_name 的软件没有被依赖时则移除，否则报错 e 代表 erase（中文直译：抹去，擦除） 通用长格式命令 --nodeps 无视依赖。安装时使用，无视依赖继续安装；移除时使用，无视依赖继续删除 --replacefiles 强制替换文件 --replacpkgs 强制替换包 --force 相当于 --replacefiles 和 --replacpkgs 综合 --test 测试是否有依赖性（比如和 -ivh 连用，则不进行安装，只检验是否依赖） --justdb 更新 rpm 数据库的错误或损坏数据 重建数据库 rpm --rebuild 查询、验证 通用 -a, --all 查询或验证全部 -f, -file 查询或验证文件所属软件包 -p, --package 查询或验证软件包文件 查询 rpm -q # 查询软件是否安装 rpm -qa # 列出所有已安装软件名称 rpm -qf # 查询文件所属的软件名 rpm -q[licdR] rpm -qp[licdR] licdR 分别表示的含义如下 -l 显示软件的所有文件与目录 -i 显示软件详细信息 -c 显示所有配置文件 -d 显示所有说明文件 -R 显示本软件依赖包含的文件 -qp 查询 rpm 文件内的信息 验证 rpm -V # 验证已安装的软件是否被修改 rpm -Va # 列出本机安装的所有软件是否被修改 rpm -Vp # 列出该软件被修改过的文件 rpm -Vf # 验证某个文件是否被修改 V 代表 verify，验证的意思。-V 命令输出的完整格式如下： SM5DLUGTP c|d|g|l|r file 以空格分隔，第一段表示文件改变的内容，第二段表示文件的类型，第三段是文件的绝对路径 第一段：如果文件内容改变了，则第一段显示相应位置的字母，否则显示 .。这里挑几个重要的解释一下 S（Size）文件大小 M（Mode）文件的类型或属性（rwx） 5（MD5）MD5。MD5改变意味着内容的改变，所以可以简单理解为内容是否改变 U（User）所属用户 G（Group）所属用户组 T（mTime）创建时间 例： [root@50cc94ef8d05 /]# rpm -Va S.5....T. c /etc/dnf/vars/infra 上述示例表示文件的大小、内容、创建时间都改变了 第二段：文件的类型 c：配置文件（config file） d：数据文件（documentation） g：幽灵文件（ghost file） l：许可证文件（license file） r：自述文件（read me） rpm -Va 可以帮我们验证系统上有没有数据被改动，如果二进制程序有被改动过，那么这个机器很有可能被入侵了。 使用 yum 管理软件 yum 全称 yellowdog updater modified （经我直译为：修改版黄狗更新器）。另外，yum 需要根用户权限。 语法 yum [选项] 命令 命令 list [keyword] 列出软件与版本，类似于 rpm -qa info [software] 列出软件具体信息，类似于 rpm -qai search 根据关键字查找某软件具体名 install 安装软件 update 更新软件 remove 删除软件 provides 根据文件名找软件名 选项 -y 所有的询问选项都自动填 y --installroot 手动指定安装目录 安装软件 yum install yum -y install #表示安装时所有提示默认yes 查询软件状态 如果软件已安装，最后一列会被 @ 标记，否则未安装 yum list yum 支持通配符。查找以 soft 开头的软件，可以这么写： yum list soft* 例：查看已安装的软件 yum list installed 如果已安装，将提示“已安装的软件”。如果未安装，将提示“可安装的软件”。如果安装软件不存在 yum 服务器中，将提示“不存在” 查看软件信息 yum info 更新软件 yum update 移除软件 yum remove 设置软件安装源 由于 yum 使用的是 CentOS 的官方软件源，可能下载速度较慢。所以建议更改软件安装源。 （TODO） 参考资料 中国大学慕课-Linux系统管理 视频教程 《鸟哥的Linux私房菜》第22章 https://man.linuxde.net/rpm rpm --help 和 yum --help "},"part9-process-management.html":{"url":"part9-process-management.html","title":"第九章：进程管理","keywords":"","body":"进程管理 名词解释 程序（Program）：可运行的二进制文件。 进程（Process）：正在运行的程序。 控制终端（Controll Terminal）：Linux 有 7 个终端界面（tty，六个命令行界面，一个图形界面），分别可以使用 Alt+F1/.../F7 切换，其中一个界面卡死，不影响打开其他几个。 会话（Session）：我们每新开一个命令行对话框，其实打开的不是一个真正的终端，而是一个会话。每个会话会关联一个终端。使用 ps 可以查看当前会话所属的终端。如下代码块所示，TTY 就代表所属的终端。 任务（job）：每个会话都会有一个前台任务，多个后台任务。如果会话所属的终端不是 tty，那么在会话关闭的时候，所有的 job 都会接收到 SIGHUP 信号，导致进程终止。 > ps PID TTY TIME CMD 241 pts/2 00:00:00 bash 349 pts/2 00:00:00 ps 前台（Foreground）：会话任务的命令行界面。前台任务执行时不能做其他操作，需要等待命令执行完毕，但可以通过信号对任务做一些操作，比如：可以通过 Ctrl+c 中断该任务，通过 Ctrl+z 暂停该任务。 后台（Background）：后台任务允许该会话执行其他命令，可以通过在命令最后加上空格与& 符号，使任务进入后台。 任务管理 后台任务 在当前会话界面执行如下命令（睡眠 1 分钟），表示当前进程在前台运行，此时 Linux 不接受除中断信号以外的其他命令。 sleep 1m 此时我们立刻按下 Ctrl+z，会将该任务放到后台并暂停任务运行。 操作后显示如下。其中第二行的数字 1 表示任务号。+ 表示此任务为最近的一个后台任务，如果这个位置是 - 则表示这是最近的第二个后台任务，如果什么都没有则表示这是最近的两个以外的任务。Stopped 表示任务的状态是暂停，Running 表示运行。最后的 sleep 1m 表示任务名。 ^Z [1]+ Stopped sleep 1m #[任务号][+|-] 任务状态 任务全名 我们再使用如下命令： sleep 2m & # 显示如下 [2] 405 #[任务号] PID 我们发现当前会话的前台允许我们继续执行其他任务。显示的两个数字分别为任务号和PID（进程 ID）。 使用 & 符号能让进程在后台运行，而不会被 Ctrl+c 终结。 jobs 命令 接上文，如下所示，此时运行 jobs，可以列出所有的后台任务。 jobs [1]+ Stopped sleep 1m [2]- Running sleep 2m & 语法：jobs [-lrs] 选项 -l 额外显示 PID -r 仅显示运行的任务 -s 仅显示暂停的任务 fg 命令 fg 把最近一次后台运行的任务放到前台去执行（即带 + 的任务）。 fg - 把最近的第二个后台运行的任务放到前台去执行（即带 - 的任务）。 fg 把指定的任务放到前台去执行，其中 % 是可选的。 fg %1 # 取任务号为 1 的任务去前台执行 bg 命令 bg 把指定的任务（需要这个任务没有在运行）放到后台执行。 nohup 命令 nohup 表示在会话关闭时，不对该任务进行挂起。否则该任务可能因为会话中断发出的 SIGHUP 信号导致任务被终结。 nohup sleep 3m 但只使用 nohup，任务能够被 Ctrl+c 中断。另外 nohup 会默认将任务的输出写入到命令执行所在位置的 nohup.out 文件中。一般为了避免以上两种问题，通常可以使用如下方式执行 nohup 命令： nohup sleep 3m &> /dev/null & & 与 nohup 区别 这里的 & 单指与前方命令至少有一个空格，且放在命令最后的，用于后台运行命令。 & 能让任务进入后台，但不能被 Ctrl+c 中断。 nohup 不会进入后台，但能免疫会话关闭发出的 SIGHUP 信号。 通常会连用 nohup 和 & 同时免疫 Ctrl+c 和 SIGHUP 信号。 请回答以下命令的异同 command command > /dev/null command > /dev/null 2>&1 command & command > /dev/null & command > /dev/null 2>&1 & command &> /dev/null nohup command &> /dev/null nohup command &> /dev/null & 解答 command # 前台执行命令 command > /dev/null # 前台执行命令，丢弃标准输出 command > /dev/null 2>&1 # 前台执行命令，丢弃标准输出，错误输出重定向到标准输出 command & # 后台执行命令，但仍显示标准输出和错误输出 command > /dev/null & # 后台执行命令，丢弃标准输出 command > /dev/null 2>&1 & # 后台执行命令，丢弃标准输出，错误输出重定向到标准输出 command &> /dev/null # 前台执行命令，丢弃标准输出和错误输出。等同于 command > /dev/null 2>&1 nohup command &> /dev/null # 前台执行命令，丢弃标准输出和错误输出，但不挂起（hugup）任务 nohup command &> /dev/null & # 后台执行命令，丢弃标准输出和错误输出，但不挂起（hugup）任务 kill - 终止进程 语法 kill [-s sigspec | -n signum | -sigspec] [...] signum 表示信号数值 signame 表示信号名 sigspec 表示 signum 或 signame kill 常用信号 kill -l 列出 kill 命令可以发出的所有信号。 15) SIGTERM 默认信号。kill -15 等同于 kill 。 9) SIGKILL 强制中断新校。该信号会强制杀死一个任务。 1) SIGHUP 会话关闭会发出此信号。 2) SIGINT 中断信号，相当于 Ctrl+c 19) SIGSTOP 暂停信号，相当于 Ctrl+z 上述内容中，如 15) SIGTERM，数字代表 signum，字母代表 signame 示例 kill 1234 # 使用 SIGTERM 终结 pid 为 1234 的进程 kill -9 1234 # 使用 SIGKILL 终结 pid 为 1234 的进程 kill -SIGTERM %1 # 使用 SIGTERM 终结任务号为 1 的任务 衍生命令（请自行了解） killall pkill xkill 图形界面终止进程命令 进程管理 ps - 查看进程（Process Status） 语法：ps [options] 选项 -A, -e 所有进程 a 包括 tty 列和其他用户进程在内的所有内容 -l 显示当前 bash 启动的进程 r only running processes T all processes on this terminal u 显示进程所属用户名及CPU、内存占用 x processes without controlling ttys 常用组合 ps 由于历史原因，存在多种命令格式。比如 ps -ef 这样的短命令格式，比如 ps aux 这样的格式等，而且由于命令的选项十分繁多复杂，所以大家只要从以下组合中记一些即可。 ps -l 仅查看当前 bash 启动的进程 ps -lA 查看系统所有进程 ps aux 查看系统所有进程 ps -ef 查看系统所有进程（相比前两者，缺少 CPU 和内存列的显示） ps axjf 以进程树的方式显示（与 pstree 功能相似），如下所示 PPID PID PGID SID TTY TPGID STAT UID TIME COMMAND 0 1 0 0 ? -1 Sl 0 0:00 /init 1 206 206 206 ? -1 Ss 0 0:00 /init 206 207 206 206 ? -1 S 0 0:00 \\_ /init 207 208 208 208 pts/0 208 Ssl+ 1000 0:03 | \\_ docker serve --address unix:///home/super9du/.docker/ru 206 209 206 206 ? -1 Z 0 0:00 \\_ [init] 206 211 206 206 ? -1 S 0 0:00 \\_ /init 211 212 212 212 pts/1 212 Ssl+ 0 0:02 \\_ /mnt/wsl/docker-desktop/docker-desktop-proxy --distro-n 1 239 239 239 ? -1 Ss 0 0:00 /init 239 240 239 239 ? -1 S 0 0:00 \\_ /init 240 241 241 241 pts/2 460 Ss 1000 0:00 \\_ -bash 241 460 460 241 pts/2 460 R+ 1000 0:00 \\_ ps axjf ps 输出的表头及其含义 S 进程状态 R（Running）：运行中。 S（Sleep）：睡眠。 D：不可唤醒的睡眠。通常可能是在等待 I/O T：停止。可能是在后台暂停或跟踪（traced）状态 Z（Zombie）：僵尸状态。进程终止但无法被从内存中移除 UID 使用用户 PID 进程 id PPID 进程的父进程 C CPU占用百分比 SZ 内存占用 WATCH 进程是否运行。- 代表正在运行 TTY 进程使用的终端。？表示不占用终端 STIME 表示进程开始运行的时间 TIME 进程运行持续的时间 CMD 进程对应的程序名 STAT 进程状态（等同于 S 列） RSS 实际内存占用 %CPU CPU占用百分比（等同于 C 列） %MEM 内存占用百分比 top 命令 语法：top [选项] 选项 -b：以批处理模式操作； -c：显示完整的命令； -d：屏幕刷新间隔时间，单位 s； -i：设置间隔时间； -u：指定用户名； -p：指定进程； -n：循环显示的次数。 top 交互命令 h 或者 ?：显示帮助画面，给出一些简短的命令总结说明； q：退出程序； k：终止一个进程； E：切换第四、五行内存显示单位 e：切换表格内存显示单位 c：切换显示命令名称和完整命令行； M：根据驻留内存大小进行排序； m：切换显示内存信息； P：根据CPU使用百分比大小进行排序； t：切换显示进程和CPU状态信息； 输出解读 第一行：top - 现在时间 启动时间，登陆用户数，平均负载：1分钟平均，5分钟平均，15分钟平均 第二行：Tasks：进程总数，运行状态 第三行：%Cpu(s)：(us)用户空间CPU占用百分比，(sy)内核空间CPU占用百分比，(ni)省略，(id)空闲CPU占用百分比(idle)，(wa)等待输入输出的CPU时间占用百分比，省略…… 第四、五行：内存、交换空间占用，单位kb 表头： PR：进程优先级，越小越早被执行 NI：Nice值，越小越早被执行 RES：进程内存占用，单位kb（按字母 e 切换单位大小） S：进程状态 其他命令 htop：给人看的 top 命令 fuser：通过文件找到正在使用该文件的进程（file's user，文件的使用者） lsof：列出被进程所使用的文件名（ls 列出文件，lsof 列出进程的文件） pidof：找出正在执行的进程的 PID /proc 目录 proc 即 process（进程）的缩写。在 Unix 中有一个设计哲学叫做：「一切皆文件」。磁盘我们可以挂载在文件目录下，光驱、U盘、鼠标、键盘等都可以挂载在目录下，他们都可以抽象为一个文件进行描述。这样我们对磁盘、光驱、U盘等设备的读写都可以通过这个文件进行操作。Linux 亦如此。内存中的进程信息也会被映射为文件。/proc 目录下就是进程信息的映射。 如果一个进程启动了，假设他的 PID 为 1，那么他在 /proc 目录下的位置就是 /proc/1。如果我们使用 ls -l /proc/1，会发现下面有很多文件。比如： dr-xr-xr-x 2 super9du super9du 0 Dec 9 22:31 attr -r-------- 1 super9du super9du 0 Dec 9 22:31 auxv -r--r--r-- 1 super9du super9du 0 Dec 9 22:31 cgroup --w------- 1 super9du super9du 0 Dec 9 22:31 clear_refs -r--r--r-- 1 super9du super9du 0 Dec 9 22:17 cmdline -rw-r--r-- 1 super9du super9du 0 Dec 9 22:31 comm -rw-r--r-- 1 super9du super9du 0 Dec 9 22:31 coredump_filter -r--r--r-- 1 super9du super9du 0 Dec 9 22:31 cpuset lrwxrwxrwx 1 super9du super9du 0 Dec 9 22:31 cwd -> /home/super9du -r-------- 1 super9du super9du 0 Dec 9 22:31 environ lrwxrwxrwx 1 super9du super9du 0 Dec 9 22:31 exe -> /usr/bin/bash ···（省略）··· 其中 cmdline 是进程被启动的命令（执行 cat /proc/1/cmdline 试试） cwd 是命令的工作目录（cwd 即 cmd work directory） environ 是这个进程的环境变量内容 在 /proc 目录下文件还可以获取到系统相关的信息，简单列出一些对照关系（如有兴趣自行搜索或去「《鸟哥的Linux私房菜》第16章」查找）： 文件名 文件内容 /proc/cmdline 加载内核时执行的相关命令与参数 /proc/cpuinfo 本机 CPU 的相关信息（频率、类型、功能等） /proc/meminfo 内存信息，即 free 命令的内容 /proc/version 内核版本信息，即 uname -a 显示的内容 参考 《鸟哥的Linux私房菜》第16章 中国大学慕课-Linux系统管理 视频教程 Linux命令大全网站——top 命令 "},"part10-resource-management.html":{"url":"part10-resource-management.html","title":"第十章：资源管理","keywords":"","body":"资源管理 资源管理导航 磁盘管理 网络管理 free 命令 单独使用 free，输出的结果以 k 为单位。 语法 free [选项] 选项 -b|-k|-m|-g 单独使用 free，输出的结果以 k 为单位的内存信息。使用 -b，则以 Byte 为单位，以此类推，k 、m、g 分别代表以 KB、MB、GB 为单位。 -h 表示以人类可读的方式显示内存信息。 -s N 表示每隔 N 秒刷新一次 free 的数据 -c M 与 -s 搭配使用，刷新 M 次后退出（即：不再继续刷新） 示例 > free -h total used free shared buff/cache available Mem: 9.3Gi 61Mi 9.1Gi 0.0Ki 57Mi 9.0Gi Swap: 3.0Gi 0B 3.0Gi netstat 命令 查看进程的网络连接状况。一些系统里可能没有 netstat，所以也可以使用 ss 命令，其用法与 netstat 相似，这里仅介绍 netstat。 语法 netstat [选项] 选项 -a 全部 -n 将服务名换为端口号显示 -p 列出网络服务进程的 PID -t 列出 tcp 网络封包的信息 -u 列出 udp 网络封包的信息 -l 列出正在网络监听（listen）的服务 示例 netstat -anp # 或 ss -anp vmstat 命令 语法 vmstat [选项] [delay [count]] 选项 -S 定义展示的单位，单位可以是 k，m，K，M delay 表示刷新频率 count 表示刷新次数 示例 > vmstat -S m 1 1 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 1 0 0 9817 10 50 0 0 1 69 0 3 0 0 100 0 0 > vmstat -S k 1 2 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 1 0 0 9817604 10346 50827 0 0 1 69 0 3 0 0 100 0 0 0 0 0 9817604 10346 50827 0 0 0 0 4 23 0 0 100 0 0 表头解释 procs 进程 r 或 b 值越大，代表系统越忙（等待和无法唤醒的进程多） r 等待运行中的进程数量 b 不可被唤醒的进程数量 memory 内存 swpd 虚拟内存被使用的容量 free 未被使用的内存容量 buff 缓冲 swap 内存交换分区 si 或 so 值越大，代表数据在内存和磁盘中传输越频繁，系统性能越差 si 从磁盘中将进程取到内存的容量 so 由于内存不足，从内存写入磁盘的容量 system 系统 in 或 cs 值越大，代表系统与外界设备沟通越频繁（设备如磁盘、网卡等） in 每秒被中断的进程次数 cs 每秒执行的事件切换此时 cpu us 用户态的CPU使用率 sy 内核的CPU使用率 id 闲置的CPU占用率 其他 uname -a 查看系统信息。与 cat /proc/version 输出相似。 uptime 系统启动时间与任务负载 top 查看进程 CPU 占用及空闲 CPU 等信息，详见进程管理——top 命令。 cat /proc/cpuinfo 查看 CPU 信息，如核数、厂商等信息 参考 《鸟哥的Linux私房菜》第16章 "},"part11-daemon-and-security.html":{"url":"part11-daemon-and-security.html","title":"第十一章：服务与安全","keywords":"","body":"服务与安全 系统服务 名词解释 守护进程（daemon）：常驻在内存的进程。大多数守护进程名以字母 d 结尾，比如 crond、sshd 等。 服务（service）：守护进程提供的能力 CentOS 7 CentOS 7 推荐使用 systemctl 管理服务 语法 systemctl 示例 以 ssh 服务为例 启动服务：systemctl start ssh 查看服务状态：systemctl status ssh 停止服务：systemctl stop ssh 重启服务：systemctl restart ssh CentOS 6 CentOS 6 没有 systemctl，使用 service 管理服务 语法 service 示例 以 ssh 服务为例 启动服务：service ssh start 查看服务状态：service ssh status 停止服务：service ssh stop 重启服务：service ssh restart 安全防护 firewall-cmd 命令 该命令主要用于管理 Linux 服务器开放哪些端口，防止 Linux 服务器开放了多余的端口，被黑客利用并入侵。 启动服务 使用这个命令需要先启动 firewalld 服务。 启用、查看、暂停该服务：systemctl firewalld 查看开启状态端口 查看 80 端口是否在防火墙中启用，结果为 no 表示没有启用 firewall-cmd --query-port=80/tcp 列出当前开启端口 firewall-cmd --list-ports 添加端口 firewall-cmd --zone=public --add-port=3306/tcp --permanent --zone 表示作用域，public 表示公开 --add-port 表示添加端口，3306/tcp 中的 tcp 指的是传输协议 --permanent 表示永久生效 注：添加端口后必须重启防火墙，否则可能不会生效 删除端口 firewall-cmd --remove-port=6200/tcp 重启防火墙 firewall-cmd --reload 查看当前防火墙的状态 firewall-cmd --state iptables 命令 该命令与 firewall 作用相似，都是管理 Linux 端口开放的工具。但该命令不够平易近人，容易让人望而却步。但功能相比 firewall 更为强大。如有兴趣请看此文：文科生也能看懂的iptables教程 使用 iptables -L 可以查看 iptables 规则。 SELinux 简介 SELinux（Security Enhanced Linux），是美国国家安全局（NSA）开发的用于增强 Linux 安全性的。主要目的是防止系统资源被管理员滥用造成的安全问题。 在 SELinux 中进程又被称作「主体」（Subject），文件或目录又被称为「客体」（Object）。 安全策略（Policy） 用于指定不同服务是否开放某些资源的读写。 安全策略修改可以通过 vim /etc/selinux/config 进行修改，将 SELINUXTYPE=xxx 中的 xxx 修改为所需策略即可（策略选项以配置文件中的提示为主）。安全策略有如下三种： default/targeted/strict：针对网络服务限制多，本机限制少，默认策略 mls：Multi-Level Security，完整的 SELinux 限制 src/minimum：自定义策略 安全上下文（Security Context） 进程和文件都有自己的安全上下文，进程能否正确地访问文件资源取决于他们的安全上下文是否一致。 【查看安全上下文】 查看文件的安全上下文： [root@localhost ~]# ls -Z #使用选项-Z查看文件和目录的安全上下文 -rw-------．root root system_u:object_r:admin_home_t:s0 anaconda-ks.cfg -rw-r--r--．root root system_u:object_r:admin_home_t:s0 install.log -rw-r--r--．root root system_u:object_r:admin_home_t:s0 install.log.syslog 查看目录的安全上下文： [root@localhost ~]# ls -Zd /var/www/html/ drwxr-xr-x．root root system_u:object_r:httpd_sys_content_t:s0 /var/www/html/ 查看进程的安全上下文： [root@localhost ~]# ps -eZ # 或 ps auxZ 以上内容中形如 system_u:object_r:httpd_sys_content_t:s0 这样的内容，称之为「安全上下文」。 【安全上下文解释】 安全上下文共有5个字段，分别使用 : 分割，最后一个字段可省略。 system_u:object_r:httpd_sys_content_t:s0:[类别] 身份 :角色 :类型 :灵敏度:[类别] 身份（identity）：标识数据身份，相当于权限中的用户。常见身份类型如下： root：root 身份 system_u：系统身份 user_u：用户身份 角色（role）：表示数据是进程还是文件或目录。常见角色如下： object_r：表示数据为文件或目录 system：表示数据是进程 类型（type）：用于确认进程是否可以访问文件。进程的安全上下文类型字段与文件的安全上下文类型匹配则可以访问。 类型字段在进程的安全上下文中被称作域（domain），在文件或目录的安全上下文中被称作类型（type）。域与类型相匹配才能正确访问。 灵敏度：使用 sN 表示（N 代表数字），N 越大，灵敏度越高。 类别：可以使用 seinfo 查询。seinfo 具体用法见本页参考第 3 条。 SELinux 启用模式 SELinux 共有三种启用模式： Enforcing：强制模式。SELinux 已启用，且已经正确开始限制 domain/type。 Permissive：宽容模式。SELinux 已启用，不过仅会有警告信息，不会实际限制 domain/type 读写。 Disabled：关闭模式。SELinux 未启用。 查看 SELinux 启用模式：getenforce 查看 SELinux 的策略 语法 sestatus [-vb] 选项 -v 检查文件与进程的安全上下文 -b 将策略规则的布尔值列出（启动为 1，否则为 0） SELinux 的启动与关闭 注意SELinux 的启动模式修改必须重启操作系统。 【配置修改】 使用 vim 修改 SELinux 的配置文件 vim /etc/selinux/config 把 SELINUX=xxx 中的 xxx 设置成 enforcing、permissive、disabled 中的一个。 【命令修改】 语法 setenforce [0|1] 选项 0：转成 Permissive 模式 1：转成 Enforcing 模式 注意 如果 getenforce 的结果是 Disabled，则无法通过 setenforce 切换启动模式 参考 《鸟哥的Linux私房菜》第16、17章 中国大学慕课-Linux系统管理 视频教程 SELinux系列（六）——SELinux安全上下文查看方法 详细介绍 "},"part12-remote.html":{"url":"part12-remote.html","title":"第十二章：远程维护","keywords":"","body":"远程维护 广告：在此之前，你可能需要一台自己的远程服务器（每月 8 块多） 远程软件 远程连接软件 常用的远程连接软件有 Xshell、SecureCRT、putty 等。 远程文件传输软件 常用的远程文件传输软件有 Xftp（一般与 Xshell 组合使用）、WinSCP 等。 下载上述软件 链接：https://pan.baidu.com/s/17_-Oi_bmAhD7zYufl_stYQ 提取码：vamj 复制这段内容后打开百度网盘手机App，操作更方便哦 远程登陆 通常我们使用 ssh 协议进行远程登陆服务器。Linux 上 sshd 为我们提供了远程登陆的能力，因此我们能够远程登录服务器，需要运行该守护进程。通常情况下 sshd 默认开机启动，并监听 22 端口。所以我们远程登陆时连接 22 端口，可以直接使用远程工具登陆服务器。 这里仅介绍 Xshell 这一种远程连接软件连接服务器的方式，其他软件大致相同。 使用 Xshell 远程登陆 【步骤一】：打开 Xshell，点击下图所示会话窗的新建按钮。 如果没有上图的会话框，也可以点击如下图所示的左上角的小窗。 【步骤二】：填写会话名称和主机地址 【步骤三】：点击左侧「用户身份验证」，填写用户名密码，然后点击下方的连接按钮。如果提示需要保存密钥，选择「接收并保存」。 使用命令远程登陆 除了使用远程连接软件登录，你也可以使用任意一款命令行软件登陆。只要你的电脑支持 ssh 命令。 语法 ssh [user@]host[:port] # 或使用如下方式 ssh [user@]host [port] 解释 user 为登陆用户名，一般为 root。 host 为登陆 IP，一般为公网可访问的 IP 地址。 port 为远程的端口，默认为 22，可以省略不写。如果远程端口设置为其他端口号，则需要填写该选项 不能远程连接服务器的情况 首先确认远程的 IP、用户名、密码等是否正确。 查看服务器是否启用 sshd 守护进程。 systemctl status sshd # centos 6 请使用 service 命令 如果 sshd 守护进程未启动，使用如下命令启动；否则跳过此步骤。 systemctl start sshd 如仍不能连接，使用如下命令查看是否启动 22 端口： firewall-cmd --list-ports 如未启用，使用如下命令开放 22 端口： firewall-cmd --zone=public --add-port=22/tcp --permanent firewall-cmd --reload # 或 service firewall-cmd restart 远程文件传输 除了使用远程文件传输软件，也可以使用一些远程文件传输的命令行工具进行文件传输。比如 lrzsz、scp。 lrzsz 工具 如果你使用的是 xshell 或 SecureCRT 等支持 zmodem/xmodem/ymodem 的远程工具，可以使用 rz、sz 命令进行文件传输，非常方便。你甚至可以通过拖动文件到命令行的方式发送文件到远程服务器。但使用 rz、sz 前需要先安装 lrzsz。 安装 查看是否安装 lrzsz，显示如下所示则表示已安装 > yum list installed | grep lrzsz lrzsz.x86_64 0.12.20-36.el7 @os # 或使用如下命令，最后的 os 前有 @ 表示已安装，否则未安装 > yum list lrzsz lrzsz.x86_64 0.12.20-36.el7 @os 安装 lrzsz yum -y install lrzsz 使用 使用远程服务器发送文件到本机： sz filename 使用远程服务器接收本机文件： rz 或拖动文件到命令行 sftp 命令 使用 sftp 连接远程服务器 sftp [user@]host [port] 连接成功显示如下： sftp:/root> 上传文件到远程服务器 sftp:/root> put 从远程服务器下载文件 sftp:/root> get 其他命令 在连接 sftp 后，还可以使用如下几个命令。 cd 切换远程工作目录 lcd 切换本地工作目录 ls 列出远程目录下的内容 lls 列出本地目录的内容 pwd 打印远程工作目录 lpwd 打印本地工作目录 以及 mkdir、mv、rename、rm、rmdir等 显示帮助 sftp:/root> help "},"part13-practice.html":{"url":"part13-practice.html","title":"第十三章：最佳实践","keywords":"","body":"最佳实践 恭喜你已经学完了，但是请不要放弃。你需要通过实践熟练所学的 Linux 命令，因此请你完成下文所有的部署任务。有些没有链接，需要你自己搜索。 部署 MySQL：目前使用最多的开源关系型数据库。 部署 Java：CentOS7下安装JDK详细过程。 部署 Tomcat：部署 Java 应用必备。 部署 Redis：Redis 是一款基于键值对存储的数据库，数据存储在内存中，速度快，常用作缓存服务器。 部署 Elasticsearch：简称 ES。ES 是一个 Java 编写的，用于分布式、准实时搜索的搜索引擎。由于 ES 需要服务器是多核的，所以需要在本地的虚拟机中部署，不可在线上服务器部署。 部署 WordPress：创建你的博客。你可以将 WordPress 部署到你的线上服务器上，创建你自己的博客，在上面发表文章。 广告：你可能需要一台自己的远程服务器（每月 8 块多） "},"terms.html":{"url":"terms.html","title":"附录：名词参考","keywords":"","body":"名词参考 大小写敏感: 即区分大小写。Linux 中的命令和脚本是区分大小写的，文件的名称也是区分大小写的。 shell: 原意壳，包裹在操作系统内核之外，是一种用于解释执行 shell 脚本的工具。Linux 中的 shell 有很多种，比如 sh（Bourne shell）、bash（Bourne Again shell）、dash（Debian Almquist shell）、zsh 等。shell 命令对大小写敏感。 bash: Linux 默认的 shell，在 Linux 上 sh 一般是 bash 的软连接。但 ubuntu 等 debain 系列的 Linux 上，sh 默认指向 dash。 路径: 由多级目录组成且中间使用斜杠连接的一串字符串。Windows 中开头必须是盘符:\\，结尾必须是最后一级目录或文件名（Windows中除可执行文件，均需加扩展名）。如 Windows 中 cmd 的路径为： C:\\windows\\system32\\cmd.exe。 绝对路径: 如 /tmp/level1, /home 这种从根目录一直列的路径称之为绝对路径（home 是根目录下的文件夹）。 相对路径: 如 level/level2 level1 test 这种从当前目录列的路径称之为绝对路径。 归档: 同打包，与压缩不同。归档代表着将文件不经压缩放在一个包中，类似于复制。 解档: 同解包，与解压不同。代表将归档的文件按照需要还原以供使用。 打包: 即归档，与压缩不同。Linux中打包和压缩是两种不同的存在。归档代表着将文件不经压缩放在一个包中，类似于复制。 解包: 即解档，与解压不同。代表将归档的文件按照需要还原以供使用。 输出重定向：指将某个程序默认指向 stdout 或者 stderr 的输出文本流转而指向另一个文件，也即程序输出到某个指定文件中而不是输出到终端屏幕或者终端窗口中了。 输入重定向：指让某个程序从指定文件中获取输入而非从 stdin 中 （常常指键盘）获取输入。 管道：特殊的输入输出重定向。将一个命令的标准输出重定向为另一个命令的标准输入。 程序（Program）：可运行的二进制文件。 进程（Process）：正在运行的程序。 控制终端（Controll Terminal）：Linux 有 7 个终端界面（tty，六个命令行界面，一个图形界面），分别可以使用 Alt+F1/.../F7 切换，其中一个界面卡死，不影响打开其他几个。 会话（Session）：我们每新开一个命令行对话框，其实打开的不是一个真正的终端，而是一个会话。每个会话会关联一个终端。使用 ps 可以查看当前会话所属的终端。如下代码块所示，TTY 就代表所属的终端。 任务（job）：每个会话都会有一个前台任务，多个后台任务。如果会话所属的终端不是 tty，那么在会话关闭的时候，所有的 job 都会接收到 SIGHUP 信号，导致进程终止。 > ps PID TTY TIME CMD 241 pts/2 00:00:00 bash 349 pts/2 00:00:00 ps 前台（Foreground）：会话任务的命令行界面。前台任务执行时不能做其他操作，需要等待命令执行完毕，但可以通过信号对任务做一些操作，比如：可以通过 Ctrl+c 中断该任务，通过 Ctrl+z 暂停该任务。 后台（Background）：后台任务允许该会话执行其他命令，可以通过在命令最后加上空格与& 符号，使任务进入后台。 守护进程（daemon）：常驻在内存的进程。大多数守护进程名以字母 d 结尾，比如 crond、sshd 等。 服务（service）：守护进程提供的能力 "},"link.html":{"url":"link.html","title":"友情链接","keywords":"","body":"友情链接 广告：你可能需要一台自己的远程服务器（每月 8 块多） "}}